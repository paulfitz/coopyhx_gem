/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArrayT_String_t swig_types[0]
#define SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t swig_types[1]
#define SWIGTYPE_p_ArrayT_int_t swig_types[2]
#define SWIGTYPE_p_Class swig_types[3]
#define SWIGTYPE_p_Coopyhx swig_types[4]
#define SWIGTYPE_p_Dynamic swig_types[5]
#define SWIGTYPE_p_OBJ_ swig_types[6]
#define SWIGTYPE_p_String swig_types[7]
#define SWIGTYPE_p_Void swig_types[8]
#define SWIGTYPE_p_char swig_types[9]
#define SWIGTYPE_p_coopy__Alignment_obj swig_types[10]
#define SWIGTYPE_p_coopy__Bag_obj swig_types[11]
#define SWIGTYPE_p_coopy__CompareFlags_obj swig_types[12]
#define SWIGTYPE_p_coopy__CompareTable_obj swig_types[13]
#define SWIGTYPE_p_coopy__Coopy_obj swig_types[14]
#define SWIGTYPE_p_coopy__Datum_obj swig_types[15]
#define SWIGTYPE_p_coopy__SimpleCell_obj swig_types[16]
#define SWIGTYPE_p_coopy__SimpleTable_obj swig_types[17]
#define SWIGTYPE_p_coopy__TableDiff_obj swig_types[18]
#define SWIGTYPE_p_coopy__View_obj swig_types[19]
#define SWIGTYPE_p_cpp__CppInt32__ swig_types[20]
#define SWIGTYPE_p_f___Dynamic swig_types[21]
#define SWIGTYPE_p_f_p_hx__Object__Dynamic swig_types[22]
#define SWIGTYPE_p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic swig_types[23]
#define SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic__Dynamic swig_types[24]
#define SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[25]
#define SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[26]
#define SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[27]
#define SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[28]
#define SWIGTYPE_p_f_r_q_const__Array__Dynamic____Dynamic swig_types[29]
#define SWIGTYPE_p_f_r_q_const__Dynamic__Dynamic swig_types[30]
#define SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[31]
#define SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[32]
#define SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[33]
#define SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic swig_types[34]
#define SWIGTYPE_p_hx__DynamicArray swig_types[35]
#define SWIGTYPE_p_hx__MarkContext swig_types[36]
#define SWIGTYPE_p_hx__NullT_String_t swig_types[37]
#define SWIGTYPE_p_hx__Object swig_types[38]
#define SWIGTYPE_p_hx__ObjectPtrT_IMap_obj_t swig_types[39]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t swig_types[40]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t swig_types[41]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t swig_types[42]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t swig_types[43]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Coopy_obj_t swig_types[44]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t swig_types[45]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__IndexPair_obj_t swig_types[46]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t swig_types[47]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Report_obj_t swig_types[48]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t swig_types[49]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t swig_types[50]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t swig_types[51]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t swig_types[52]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t swig_types[53]
#define SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t swig_types[54]
#define SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t swig_types[55]
#define SWIGTYPE_p_hx__ObjectPtrT_hx__Object_t swig_types[56]
#define SWIGTYPE_p_hx__VisitContext swig_types[57]
#define SWIGTYPE_p_null swig_types[58]
#define SWIGTYPE_p_super swig_types[59]
#define SWIGTYPE_p_type_info swig_types[60]
#define SWIGTYPE_p_wchar_t swig_types[61]
static swig_type_info *swig_types[63];
static swig_module_info swig_module = {swig_types, 62, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_coopyhx
#define SWIG_name    "Coopyhx"

static VALUE mCoopyhx;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020009 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


  // stop haxe playing silly buggers with limits.h
#define HX_UNDEFINE_H

#include <hxcpp.h>
// haxe plays silly buggers with NULL
#ifndef NULL
#define NULL 0
#endif

#include <coopy/Datum.h>
#include <coopy/Bag.h>
#include <coopy/View.h>
#include <coopy/SimpleTable.h>
#include <coopy/SimpleCell.h>
#include <coopy/Coopy.h>
#include <coopy/CompareFlags.h>
#include <coopy/TableDiff.h>
#include <coopy/CompareTable.h>
#include <coopy/Alignment.h>
#include <coopyhx.h>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

static swig_class SwigClassCoopyhx;

SWIGINTERN VALUE
_wrap_Coopyhx_boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  Coopyhx::boot();
  return Qnil;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Coopyhx_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Coopyhx_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Coopyhx);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Coopyhx(int argc, VALUE *argv, VALUE self) {
  Coopyhx *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Coopyhx *)new Coopyhx();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Coopyhx(Coopyhx *arg1) {
    delete arg1;
}

static swig_class SwigClassObjectPtrSimpleTable_obj;

SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::SimpleTable_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (coopy::SimpleTable_obj *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::SimpleTable_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (coopy::SimpleTable_obj *)((hx::ObjectPtr< coopy::SimpleTable_obj > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrSimpleTable_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrSimpleTable_obj(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< coopy::SimpleTable_obj > *)new hx::ObjectPtr< coopy::SimpleTable_obj >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_coopy_SimpleTable_obj_Sg_(hx::ObjectPtr< coopy::SimpleTable_obj > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___construct(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__construct", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__construct", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (*arg1)->__construct(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  hx::ObjectPtr< coopy::SimpleTable_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__new", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__new", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__new", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (*arg1)->__new(arg2,arg3);
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::SimpleTable_obj >(static_cast< const hx::ObjectPtr< coopy::SimpleTable_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__CreateEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  hx::DynamicArray arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__Create", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::DynamicArray","__Create", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","__Create", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< hx::DynamicArray * >(argp2));
    }
  }
  result = (*arg1)->__Create(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___boot(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__boot", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  (*arg1)->__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___register(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__register", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  (*arg1)->__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___Mark(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (*arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___Visit(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (*arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_asDatum(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Datum_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","asDatum", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->asDatum();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Datum_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Datum_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_asBag(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Bag_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","asBag", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->asBag();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Bag_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Bag_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_asTable(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","asTable", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->asTable();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Table_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Table_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___ToInterface(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  type_info *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","__ToInterface", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_type_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "type_info const &","__ToInterface", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "type_info const &","__ToInterface", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< type_info * >(argp2);
  result = (hx::Object *)(*arg1)->__ToInterface((type_info const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj___ToString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_trimBlank(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","trimBlank", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (bool)(*arg1)->trimBlank();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_trimBlank_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","trimBlank_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->trimBlank_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteColumns(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  Array< int > arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","insertOrDeleteColumns", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ArrayT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Array< int >","insertOrDeleteColumns", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Array< int >","insertOrDeleteColumns", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Array< int > * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","insertOrDeleteColumns", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(*arg1)->insertOrDeleteColumns(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteColumns_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","insertOrDeleteColumns_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->insertOrDeleteColumns_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteRows(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  Array< int > arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","insertOrDeleteRows", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ArrayT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Array< int >","insertOrDeleteRows", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Array< int >","insertOrDeleteRows", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Array< int > * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","insertOrDeleteRows", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(*arg1)->insertOrDeleteRows(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteRows_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","insertOrDeleteRows_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->insertOrDeleteRows_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_clear(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->clear();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_clear_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","clear_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->clear_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_resize(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","resize", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(*arg1)->resize(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_resize_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","resize_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->resize_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_isResizable(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","isResizable", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (bool)(*arg1)->isResizable();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_isResizable_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","isResizable_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->isResizable_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getItemView(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getItemView", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getItemView();
  vresult = SWIG_NewPointerObj((new ::coopy::View(static_cast< const ::coopy::View& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getItemView_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getItemView_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getItemView_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getCellView(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getCellView", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getCellView();
  vresult = SWIG_NewPointerObj((new ::coopy::View(static_cast< const ::coopy::View& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getCellView_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getCellView_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getCellView_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_toString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getItem(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::coopy::Datum result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getItem", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getItem", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (*arg1)->getItem(arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::Datum(static_cast< const ::coopy::Datum& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getItem_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getItem_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getItem_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_setCell(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  ::coopy::Datum arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","setCell", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","setCell", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","setCell", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::coopy::Datum","setCell", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","setCell", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::coopy::Datum * >(argp4));
    }
  }
  result = (*arg1)->setCell(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_setCell_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","setCell_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->setCell_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getCell(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ::coopy::Datum result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getCell", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getCell", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","getCell", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (*arg1)->getCell(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::coopy::Datum(static_cast< const ::coopy::Datum& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getCell_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getCell_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getCell_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_get_size(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","get_size", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (int)(*arg1)->get_size();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_get_size_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","get_size_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->get_size_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_get_height(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","get_height", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (int)(*arg1)->get_height();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_get_height_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","get_height_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->get_height_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_get_width(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","get_width", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (int)(*arg1)->get_width();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_get_width_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","get_width_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->get_width_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getTable(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getTable", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getTable();
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_getTable_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","getTable_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->getTable_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_bag_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  ::coopy::Bag *arg2 = (::coopy::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","bag", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Bag *","bag", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Bag * >(argp2);
  if (arg1) (*arg1)->bag = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_bag_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Bag *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","bag", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (::coopy::Bag *)& ((*arg1)->bag);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_h_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","h", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","h", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->h = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_h_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","h", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (int) ((*arg1)->h);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_w_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","w", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","w", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->w = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_w_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","w", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (int) ((*arg1)->w);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_data_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  ::haxe::ds::IntMap *arg2 = (::haxe::ds::IntMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::haxe::ds::IntMap *","data", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::haxe::ds::IntMap * >(argp2);
  if (arg1) (*arg1)->data = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_data_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::haxe::ds::IntMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (::haxe::ds::IntMap *)& ((*arg1)->data);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_tableToString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","tableToString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","tableToString", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","tableToString", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  result = (*arg1)->tableToString(arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleTable_obj_tableToString_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleTable_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleTable_obj > *","tableToString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleTable_obj > * >(argp1);
  result = (*arg1)->tableToString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassObjectPtrSimpleCell_obj;

SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::SimpleCell_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (coopy::SimpleCell_obj *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::SimpleCell_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (coopy::SimpleCell_obj *)((hx::ObjectPtr< coopy::SimpleCell_obj > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrSimpleCell_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrSimpleCell_obj(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< coopy::SimpleCell_obj > *)new hx::ObjectPtr< coopy::SimpleCell_obj >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_coopy_SimpleCell_obj_Sg_(hx::ObjectPtr< coopy::SimpleCell_obj > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___construct(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  Dynamic arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic","__construct", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","__construct", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Dynamic * >(argp2));
    }
  }
  result = (*arg1)->__construct(arg2);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  Dynamic arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  hx::ObjectPtr< coopy::SimpleCell_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__new", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic","__new", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","__new", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Dynamic * >(argp2));
    }
  }
  result = (*arg1)->__new(arg2);
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::SimpleCell_obj >(static_cast< const hx::ObjectPtr< coopy::SimpleCell_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__CreateEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (*arg1)->__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  hx::DynamicArray arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__Create", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::DynamicArray","__Create", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","__Create", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< hx::DynamicArray * >(argp2));
    }
  }
  result = (*arg1)->__Create(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___boot(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__boot", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  (*arg1)->__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___register(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__register", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  (*arg1)->__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___Mark(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (*arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___Visit(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (*arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_asDatum(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Datum_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","asDatum", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (*arg1)->asDatum();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Datum_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Datum_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___ToInterface(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  type_info *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","__ToInterface", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_type_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "type_info const &","__ToInterface", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "type_info const &","__ToInterface", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< type_info * >(argp2);
  result = (hx::Object *)(*arg1)->__ToInterface((type_info const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj___ToString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (*arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_toString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (*arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (*arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_datum_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  Dynamic *arg2 = (Dynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","datum", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic *","datum", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  if (arg1) (*arg1)->datum = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrSimpleCell_obj_datum_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::SimpleCell_obj > *arg1 = (hx::ObjectPtr< coopy::SimpleCell_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::SimpleCell_obj > *","datum", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::SimpleCell_obj > * >(argp1);
  result = (Dynamic *)& ((*arg1)->datum);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynamic, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassObjectPtrDatum_obj;

SWIGINTERN VALUE
_wrap_ObjectPtrDatum_obj___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Datum_obj > *arg1 = (hx::ObjectPtr< coopy::Datum_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::Datum_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Datum_obj > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Datum_obj > * >(argp1);
  result = (coopy::Datum_obj *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__Datum_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrDatum_obj_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Datum_obj > *arg1 = (hx::ObjectPtr< coopy::Datum_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::Datum_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Datum_obj > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Datum_obj > * >(argp1);
  result = (coopy::Datum_obj *)((hx::ObjectPtr< coopy::Datum_obj > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__Datum_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrDatum_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrDatum_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrDatum_obj(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Datum_obj > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< coopy::Datum_obj > *)new hx::ObjectPtr< coopy::Datum_obj >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_coopy_Datum_obj_Sg_(hx::ObjectPtr< coopy::Datum_obj > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ObjectPtrDatum_obj___boot(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Datum_obj > *arg1 = (hx::ObjectPtr< coopy::Datum_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Datum_obj > *","__boot", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Datum_obj > * >(argp1);
  (*arg1)->__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrDatum_obj_toString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Datum_obj > *arg1 = (hx::ObjectPtr< coopy::Datum_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Datum_obj > *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Datum_obj > * >(argp1);
  result = (*arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrDatum_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Datum_obj > *arg1 = (hx::ObjectPtr< coopy::Datum_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Datum_obj > *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Datum_obj > * >(argp1);
  result = (*arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassObjectPtrCompareTable_obj;

SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::CompareTable_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (coopy::CompareTable_obj *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::CompareTable_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (coopy::CompareTable_obj *)((hx::ObjectPtr< coopy::CompareTable_obj > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrCompareTable_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrCompareTable_obj(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< coopy::CompareTable_obj > *)new hx::ObjectPtr< coopy::CompareTable_obj >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_coopy_CompareTable_obj_Sg_(hx::ObjectPtr< coopy::CompareTable_obj > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___construct(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->__construct();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hx::ObjectPtr< coopy::CompareTable_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__new", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->__new();
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::CompareTable_obj >(static_cast< const hx::ObjectPtr< coopy::CompareTable_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__CreateEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  hx::DynamicArray arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__Create", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::DynamicArray","__Create", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","__Create", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< hx::DynamicArray * >(argp2));
    }
  }
  result = (*arg1)->__Create(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___boot(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__boot", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  (*arg1)->__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___register(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__register", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  (*arg1)->__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___Mark(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (*arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___Visit(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (*arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj___ToString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_getIndexes(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Array< hx::ObjectPtr< coopy::IndexPair_obj > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","getIndexes", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->getIndexes();
  vresult = SWIG_NewPointerObj((new Array< ::coopy::IndexPair >(static_cast< const Array< ::coopy::IndexPair >& >(result))), SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_getIndexes_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","getIndexes_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->getIndexes_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_storeIndexes(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","storeIndexes", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->storeIndexes();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_storeIndexes_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","storeIndexes_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->storeIndexes_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_compareCore(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","compareCore", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (bool)(*arg1)->compareCore();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_compareCore_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","compareCore_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->compareCore_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_isEqual2(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","isEqual2", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","isEqual2", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","isEqual2", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","isEqual2", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","isEqual2", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = (bool)(*arg1)->isEqual2(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_isEqual2_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","isEqual2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->isEqual2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_testIsEqual(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","testIsEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (bool)(*arg1)->testIsEqual();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_testIsEqual_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","testIsEqual_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->testIsEqual_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_hasSameColumns2(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","hasSameColumns2", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","hasSameColumns2", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","hasSameColumns2", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","hasSameColumns2", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","hasSameColumns2", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = (bool)(*arg1)->hasSameColumns2(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_hasSameColumns2_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","hasSameColumns2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->hasSameColumns2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_testHasSameColumns(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","testHasSameColumns", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (bool)(*arg1)->testHasSameColumns();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_testHasSameColumns_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","testHasSameColumns_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->testHasSameColumns_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_alignColumns(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","alignColumns", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","alignColumns", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","alignColumns", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","alignColumns", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignColumns", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::coopy::Table","alignColumns", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignColumns", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::coopy::Table * >(argp4));
    }
  }
  result = (*arg1)->alignColumns(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_alignColumns_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","alignColumns_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->alignColumns_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_alignCore2(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","alignCore2", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","alignCore2", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","alignCore2", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","alignCore2", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignCore2", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::coopy::Table","alignCore2", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignCore2", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::coopy::Table * >(argp4));
    }
  }
  result = (*arg1)->alignCore2(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_alignCore2_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","alignCore2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->alignCore2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_alignCore(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  ::coopy::Alignment arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","alignCore", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","alignCore", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","alignCore", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  result = (*arg1)->alignCore(arg2);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_alignCore_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","alignCore_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->alignCore_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_getComparisonState(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::TableComparisonState_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","getComparisonState", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->getComparisonState();
  vresult = SWIG_NewPointerObj((new ::coopy::TableComparisonState(static_cast< const ::coopy::TableComparisonState& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_getComparisonState_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","getComparisonState_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->getComparisonState_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_align(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->align();
  vresult = SWIG_NewPointerObj((new ::coopy::Alignment(static_cast< const ::coopy::Alignment& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_align_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","align_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->align_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_attach(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::TableComparisonState_obj > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","attach", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::TableComparisonState","attach", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::TableComparisonState","attach", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::TableComparisonState * >(argp2));
    }
  }
  result = (bool)(*arg1)->attach(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_attach_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","attach_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (*arg1)->attach_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_indexes_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  Array< ::coopy::IndexPair > *arg2 = (Array< ::coopy::IndexPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","indexes", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Array< ::coopy::IndexPair > *","indexes", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Array< ::coopy::IndexPair > * >(argp2);
  if (arg1) (*arg1)->indexes = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_indexes_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Array< ::coopy::IndexPair > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","indexes", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (Array< ::coopy::IndexPair > *)& ((*arg1)->indexes);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_comp_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  ::coopy::TableComparisonState *arg2 = (::coopy::TableComparisonState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","comp", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::TableComparisonState *","comp", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::TableComparisonState * >(argp2);
  if (arg1) (*arg1)->comp = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrCompareTable_obj_comp_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > *arg1 = (hx::ObjectPtr< coopy::CompareTable_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::TableComparisonState *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::CompareTable_obj > *","comp", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::CompareTable_obj > * >(argp1);
  result = (::coopy::TableComparisonState *)& ((*arg1)->comp);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassObjectPtrAlignment_obj;

SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::Alignment_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (coopy::Alignment_obj *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::Alignment_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (coopy::Alignment_obj *)((hx::ObjectPtr< coopy::Alignment_obj > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrAlignment_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrAlignment_obj(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< coopy::Alignment_obj > *)new hx::ObjectPtr< coopy::Alignment_obj >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_coopy_Alignment_obj_Sg_(hx::ObjectPtr< coopy::Alignment_obj > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___construct(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->__construct();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hx::ObjectPtr< coopy::Alignment_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__new", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->__new();
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::Alignment_obj >(static_cast< const hx::ObjectPtr< coopy::Alignment_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__CreateEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  hx::DynamicArray arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__Create", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::DynamicArray","__Create", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","__Create", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< hx::DynamicArray * >(argp2));
    }
  }
  result = (*arg1)->__Create(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___boot(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__boot", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  (*arg1)->__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___register(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__register", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  (*arg1)->__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___Mark(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (*arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___Visit(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (*arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj___ToString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toOrder2(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Ordering_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toOrder2", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toOrder2();
  vresult = SWIG_NewPointerObj((new ::coopy::Ordering(static_cast< const ::coopy::Ordering& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toOrder2_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toOrder2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toOrder2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toOrder3(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Ordering_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toOrder3", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toOrder3();
  vresult = SWIG_NewPointerObj((new ::coopy::Ordering(static_cast< const ::coopy::Ordering& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toOrder3_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toOrder3_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toOrder3_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getTargetHeader(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getTargetHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int)(*arg1)->getTargetHeader();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getTargetHeader_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getTargetHeader_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->getTargetHeader_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getSourceHeader(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getSourceHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int)(*arg1)->getSourceHeader();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getSourceHeader_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getSourceHeader_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->getSourceHeader_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getTarget(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getTarget", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->getTarget();
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getTarget_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getTarget_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->getTarget_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getSource(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getSource", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->getSource();
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_getSource_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","getSource_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->getSource_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toOrder(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Ordering_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toOrder", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toOrder();
  vresult = SWIG_NewPointerObj((new ::coopy::Ordering(static_cast< const ::coopy::Ordering& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toOrder_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toOrder_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toOrder_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_count(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int)(*arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_count_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","count_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->count_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_b2a(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","b2a", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","b2a", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (*arg1)->b2a(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_b2a_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","b2a_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->b2a_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_a2b(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","a2b", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","a2b", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (*arg1)->a2b(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_a2b_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","a2b_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->a2b_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_link(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","link", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","link", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","link", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (*arg1)->link(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_link_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","link_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->link_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_setRowlike(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","setRowlike", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setRowlike", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (*arg1)->setRowlike(arg2);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_setRowlike_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","setRowlike_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->setRowlike_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_headers(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","headers", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","headers", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","headers", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (*arg1)->headers(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_headers_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","headers_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->headers_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_tables(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","tables", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","tables", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","tables", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","tables", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","tables", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = (*arg1)->tables(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_tables_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","tables_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->tables_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_range(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","range", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","range", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (*arg1)->range(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_range_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","range_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (*arg1)->range_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_meta_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::coopy::Alignment *arg2 = (::coopy::Alignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","meta", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment *","meta", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Alignment * >(argp2);
  if (arg1) (*arg1)->meta = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_meta_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","meta", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::coopy::Alignment *)& ((*arg1)->meta);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_reference_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::coopy::Alignment *arg2 = (::coopy::Alignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","reference", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment *","reference", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Alignment * >(argp2);
  if (arg1) (*arg1)->reference = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_reference_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","reference", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::coopy::Alignment *)& ((*arg1)->reference);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_order_cache_has_reference_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","order_cache_has_reference", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","order_cache_has_reference", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (*arg1)->order_cache_has_reference = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_order_cache_has_reference_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","order_cache_has_reference", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (bool) ((*arg1)->order_cache_has_reference);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_order_cache_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::coopy::Ordering *arg2 = (::coopy::Ordering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","order_cache", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Ordering *","order_cache", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Ordering * >(argp2);
  if (arg1) (*arg1)->order_cache = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_order_cache_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Ordering *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","order_cache", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::coopy::Ordering *)& ((*arg1)->order_cache);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_map_count_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","map_count", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","map_count", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->map_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_map_count_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","map_count", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int) ((*arg1)->map_count);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ib_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ib", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ib", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->ib = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ib_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ib", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int) ((*arg1)->ib);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ia_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ia", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ia", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->ia = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ia_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ia", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int) ((*arg1)->ia);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_tb_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::coopy::Table *arg2 = (::coopy::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","tb", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table *","tb", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Table * >(argp2);
  if (arg1) (*arg1)->tb = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_tb_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Table *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","tb", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::coopy::Table *)& ((*arg1)->tb);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ta_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::coopy::Table *arg2 = (::coopy::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ta", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table *","ta", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Table * >(argp2);
  if (arg1) (*arg1)->ta = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ta_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Table *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ta", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::coopy::Table *)& ((*arg1)->ta);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_hb_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","hb", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","hb", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->hb = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_hb_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","hb", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int) ((*arg1)->hb);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ha_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ha", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ha", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->ha = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_ha_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","ha", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (int) ((*arg1)->ha);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_map_b2a_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::haxe::ds::IntMap *arg2 = (::haxe::ds::IntMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","map_b2a", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::haxe::ds::IntMap *","map_b2a", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::haxe::ds::IntMap * >(argp2);
  if (arg1) (*arg1)->map_b2a = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_map_b2a_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::haxe::ds::IntMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","map_b2a", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::haxe::ds::IntMap *)& ((*arg1)->map_b2a);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_map_a2b_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  ::haxe::ds::IntMap *arg2 = (::haxe::ds::IntMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","map_a2b", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::haxe::ds::IntMap *","map_a2b", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::haxe::ds::IntMap * >(argp2);
  if (arg1) (*arg1)->map_a2b = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrAlignment_obj_map_a2b_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > *arg1 = (hx::ObjectPtr< coopy::Alignment_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::haxe::ds::IntMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::Alignment_obj > *","map_a2b", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::Alignment_obj > * >(argp1);
  result = (::haxe::ds::IntMap *)& ((*arg1)->map_a2b);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassObjectPtrTableDiff_obj;

SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::TableDiff_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (coopy::TableDiff_obj *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  coopy::TableDiff_obj *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (coopy::TableDiff_obj *)((hx::ObjectPtr< coopy::TableDiff_obj > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrTableDiff_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrTableDiff_obj(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< coopy::TableDiff_obj > *)new hx::ObjectPtr< coopy::TableDiff_obj >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_coopy_TableDiff_obj_Sg_(hx::ObjectPtr< coopy::TableDiff_obj > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___construct(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::CompareFlags_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","__construct", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","__construct", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::CompareFlags","__construct", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::CompareFlags","__construct", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::CompareFlags * >(argp3));
    }
  }
  result = (*arg1)->__construct(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::CompareFlags_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  hx::ObjectPtr< coopy::TableDiff_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__new", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","__new", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","__new", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::CompareFlags","__new", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::CompareFlags","__new", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::CompareFlags * >(argp3));
    }
  }
  result = (*arg1)->__new(arg2,arg3);
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::TableDiff_obj >(static_cast< const hx::ObjectPtr< coopy::TableDiff_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__CreateEmpty", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  hx::DynamicArray arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__Create", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::DynamicArray","__Create", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","__Create", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< hx::DynamicArray * >(argp2));
    }
  }
  result = (*arg1)->__Create(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___boot(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__boot", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  (*arg1)->__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___register(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__register", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  (*arg1)->__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___Mark(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (*arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___Visit(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (*arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj___ToString(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_test(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Report_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","test", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->test();
  vresult = SWIG_NewPointerObj((new ::coopy::Report(static_cast< const ::coopy::Report& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Report_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_test_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","test_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->test_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_hilite(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","hilite", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","hilite", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","hilite", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  result = (bool)(*arg1)->hilite(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_hilite_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","hilite_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->hilite_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_quoteForDiff(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > arg2 ;
  ::coopy::Datum arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","quoteForDiff", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::View","quoteForDiff", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::View","quoteForDiff", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::View * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Datum","quoteForDiff", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","quoteForDiff", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Datum * >(argp3));
    }
  }
  result = (*arg1)->quoteForDiff(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_quoteForDiff_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","quoteForDiff_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->quoteForDiff_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_getSeparator(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  ::String arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","getSeparator", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","getSeparator", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","getSeparator", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","getSeparator", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","getSeparator", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_String,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::String","getSeparator", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String","getSeparator", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::String * >(argp4));
    }
  }
  result = (*arg1)->getSeparator(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_getSeparator_dyn(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","getSeparator_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (*arg1)->getSeparator_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_flags_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  ::coopy::CompareFlags *arg2 = (::coopy::CompareFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::CompareFlags *","flags", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::CompareFlags * >(argp2);
  if (arg1) (*arg1)->flags = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_flags_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::CompareFlags *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (::coopy::CompareFlags *)& ((*arg1)->flags);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_align_set(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  ::coopy::Alignment *arg2 = (::coopy::Alignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment *","align", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Alignment * >(argp2);
  if (arg1) (*arg1)->align = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrTableDiff_obj_align_get(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::TableDiff_obj > *arg1 = (hx::ObjectPtr< coopy::TableDiff_obj > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< coopy::TableDiff_obj > *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< coopy::TableDiff_obj > * >(argp1);
  result = (::coopy::Alignment *)& ((*arg1)->align);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassObjectPtrObject;

SWIGINTERN VALUE
_wrap_ObjectPtrObject___deref__(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< hx::Object > *arg1 = (hx::ObjectPtr< hx::Object > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_hx__Object_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< hx::Object > *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< hx::Object > * >(argp1);
  result = (hx::Object *)(arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ObjectPtrObject_GetPtr(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< hx::Object > *arg1 = (hx::ObjectPtr< hx::Object > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_hx__ObjectPtrT_hx__Object_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::ObjectPtr< hx::Object > const *","GetPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< hx::ObjectPtr< hx::Object > * >(argp1);
  result = (hx::Object *)((hx::ObjectPtr< hx::Object > const *)arg1)->GetPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ObjectPtrObject_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ObjectPtrObject_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_hx__ObjectPtrT_hx__Object_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ObjectPtrObject(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< hx::Object > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (hx::ObjectPtr< hx::Object > *)new hx::ObjectPtr< hx::Object >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_hx_ObjectPtr_Sl_hx_Object_Sg_(hx::ObjectPtr< hx::Object > *arg1) {
    delete arg1;
}

static swig_class SwigClassDynamic;

SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Dynamic *)new Dynamic();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_1(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","Dynamic", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = (Dynamic *)new Dynamic(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_2(int argc, VALUE *argv, VALUE self) {
  cpp::CppInt32__ *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_cpp__CppInt32__,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "cpp::CppInt32__ const &","Dynamic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "cpp::CppInt32__ const &","Dynamic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< cpp::CppInt32__ * >(argp1);
  result = (Dynamic *)new Dynamic((cpp::CppInt32__ const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_3(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","Dynamic", 1, argv[0] ));
  } 
  arg1 = static_cast< bool >(val1);
  result = (Dynamic *)new Dynamic(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_4(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","Dynamic", 1, argv[0] ));
  } 
  arg1 = static_cast< double >(val1);
  result = (Dynamic *)new Dynamic(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_5(int argc, VALUE *argv, VALUE self) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","Dynamic", 1, argv[0] ));
  } 
  arg1 = static_cast< float >(val1);
  result = (Dynamic *)new Dynamic(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_6(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","Dynamic", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  result = (Dynamic *)new Dynamic(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_7(int argc, VALUE *argv, VALUE self) {
  String *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const &","Dynamic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","Dynamic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (Dynamic *)new Dynamic((String const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_8(int argc, VALUE *argv, VALUE self) {
  null *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_null,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "null const &","Dynamic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "null const &","Dynamic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< null * >(argp1);
  result = (Dynamic *)new Dynamic((null const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const &","Dynamic", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","Dynamic", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  result = (Dynamic *)new Dynamic((Dynamic const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Dynamic_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Dynamic_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Dynamic);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Dynamic__SWIG_10(int argc, VALUE *argv, VALUE self) {
  HX_CHAR *arg1 = (HX_CHAR *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Dynamic *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HX_CHAR const *","Dynamic", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< HX_CHAR * >(buf1);
  result = (Dynamic *)new Dynamic((HX_CHAR const *)arg1);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Dynamic(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Dynamic__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cpp__CppInt32__, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynamic__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hx__Object, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynamic__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynamic__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_null, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynamic__SWIG_8(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynamic__SWIG_9(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dynamic__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dynamic__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dynamic__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dynamic__SWIG_10(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dynamic__SWIG_3(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Dynamic.new", 
    "    Dynamic.new()\n"
    "    Dynamic.new(int inVal)\n"
    "    Dynamic.new(cpp::CppInt32__ const &inVal)\n"
    "    Dynamic.new(bool inVal)\n"
    "    Dynamic.new(double inVal)\n"
    "    Dynamic.new(float inVal)\n"
    "    Dynamic.new(hx::Object *inObj)\n"
    "    Dynamic.new(String const &inString)\n"
    "    Dynamic.new(null const &inNull)\n"
    "    Dynamic.new(Dynamic const &inRHS)\n"
    "    Dynamic.new(HX_CHAR const *inStr)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_Set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_Set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_Set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_Set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->Set(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic_Set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic_Set__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic_Set__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic_Set__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic_Set__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.Set", 
    "    void Dynamic.Set(bool inVal)\n"
    "    void Dynamic.Set(int inVal)\n"
    "    void Dynamic.Set(double inVal)\n"
    "    void Dynamic.Set(float inVal)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___get(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","__get", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__get", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((Dynamic const *)arg1)->__get(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_Default(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic *","Default", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","Default", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","Default", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (arg1)->Default((Dynamic const &)*arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  Dynamic::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_IsNumeric(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","IsNumeric", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  result = (bool)((Dynamic const *)arg1)->IsNumeric();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_Compare(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","Compare", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","Compare", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","Compare", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (int)((Dynamic const *)arg1)->Compare((Dynamic const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.==

  call-seq:
    ==(inRHS) -> bool
    ==(inRHS) -> bool
    ==(inRHS) -> bool
    ==(inRHS) -> bool
    ==(inRHS) -> bool
    ==(inRHS) -> bool
    ==(inRHS) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  null *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_null,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "null const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "null const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< null * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator ==((null const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator ==((Dynamic const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "String const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< String * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator ==((String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator ==", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((Dynamic const *)arg1)->operator ==(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator ==", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Dynamic const *)arg1)->operator ==(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator ==", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((Dynamic const *)arg1)->operator ==(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___eq____SWIG_6(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","operator ==", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Dynamic const *)arg1)->operator ==(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_null, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___eq____SWIG_6(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__eq__", 
    "    bool Dynamic.__eq__(null const &inRHS)\n"
    "    bool Dynamic.__eq__(Dynamic const &inRHS)\n"
    "    bool Dynamic.__eq__(String const &inRHS)\n"
    "    bool Dynamic.__eq__(double inRHS)\n"
    "    bool Dynamic.__eq__(float inRHS)\n"
    "    bool Dynamic.__eq__(int inRHS)\n"
    "    bool Dynamic.__eq__(bool inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.<

  call-seq:
    <(inRHS) -> bool
    <(inRHS) -> bool
    <(inRHS) -> bool
    <(inRHS) -> bool
    <(inRHS) -> bool
    <(inRHS) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___lt____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator <((Dynamic const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___lt____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "String const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< String * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator <((String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___lt____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator <", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___lt____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator <", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___lt____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator <", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___lt____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","operator <", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___lt__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___lt____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___lt____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___lt____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___lt____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___lt____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___lt____SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__lt__", 
    "    bool Dynamic.__lt__(Dynamic const &inRHS)\n"
    "    bool Dynamic.__lt__(String const &inRHS)\n"
    "    bool Dynamic.__lt__(double inRHS)\n"
    "    bool Dynamic.__lt__(float inRHS)\n"
    "    bool Dynamic.__lt__(int inRHS)\n"
    "    bool Dynamic.__lt__(bool inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.<=

  call-seq:
    <=(inRHS) -> bool
    <=(inRHS) -> bool
    <=(inRHS) -> bool
    <=(inRHS) -> bool
    <=(inRHS) -> bool
    <=(inRHS) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___le____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator <=((Dynamic const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___le____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "String const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< String * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator <=((String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___le____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator <=", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___le____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator <=", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___le____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator <=", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___le____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","operator <=", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Dynamic const *)arg1)->operator <=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___le__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___le____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___le____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___le____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___le____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___le____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___le____SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__le__", 
    "    bool Dynamic.__le__(Dynamic const &inRHS)\n"
    "    bool Dynamic.__le__(String const &inRHS)\n"
    "    bool Dynamic.__le__(double inRHS)\n"
    "    bool Dynamic.__le__(float inRHS)\n"
    "    bool Dynamic.__le__(int inRHS)\n"
    "    bool Dynamic.__le__(bool inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.>=

  call-seq:
    >=(inRHS) -> bool
    >=(inRHS) -> bool
    >=(inRHS) -> bool
    >=(inRHS) -> bool
    >=(inRHS) -> bool
    >=(inRHS) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___ge____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator >=((Dynamic const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___ge____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "String const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< String * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator >=((String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___ge____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator >=", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___ge____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator >=", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___ge____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator >=", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___ge____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","operator >=", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >=(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___ge__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___ge____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___ge____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___ge____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___ge____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___ge____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___ge____SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__ge__", 
    "    bool Dynamic.__ge__(Dynamic const &inRHS)\n"
    "    bool Dynamic.__ge__(String const &inRHS)\n"
    "    bool Dynamic.__ge__(double inRHS)\n"
    "    bool Dynamic.__ge__(float inRHS)\n"
    "    bool Dynamic.__ge__(int inRHS)\n"
    "    bool Dynamic.__ge__(bool inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.>

  call-seq:
    >(inRHS) -> bool
    >(inRHS) -> bool
    >(inRHS) -> bool
    >(inRHS) -> bool
    >(inRHS) -> bool
    >(inRHS) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___gt____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator >((Dynamic const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___gt____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "String const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< String * >(argp2);
  result = (bool)((Dynamic const *)arg1)->operator >((String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___gt____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator >", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___gt____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator >", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___gt____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator >", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___gt____SWIG_5(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","operator >", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Dynamic const *)arg1)->operator >(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___gt__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___gt____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___gt____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___gt____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___gt____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___gt____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___gt____SWIG_5(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__gt__", 
    "    bool Dynamic.__gt__(Dynamic const &inRHS)\n"
    "    bool Dynamic.__gt__(String const &inRHS)\n"
    "    bool Dynamic.__gt__(double inRHS)\n"
    "    bool Dynamic.__gt__(float inRHS)\n"
    "    bool Dynamic.__gt__(int inRHS)\n"
    "    bool Dynamic.__gt__(bool inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.+

  call-seq:
    +(inRHS) -> Dynamic
    +(s) -> String
    +(i) -> Dynamic
    +(d) -> Dynamic
    +(d) -> Dynamic

Add operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = ((Dynamic const *)arg1)->operator +((Dynamic const &)*arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "String const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "String const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< String * >(argp2);
  result = ((Dynamic const *)arg1)->operator +((String const &)*arg2);
  vresult = SWIG_NewPointerObj((new String(static_cast< const String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = ((Dynamic const *)arg1)->operator +((int const &)*arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___add____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((Dynamic const *)arg1)->operator +((double const &)*arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___add____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = ((Dynamic const *)arg1)->operator +((float const &)*arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___add____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___add____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___add____SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__add__", 
    "    Dynamic Dynamic.__add__(Dynamic const &inRHS)\n"
    "    Dynamic Dynamic.__add__(String const &s)\n"
    "    Dynamic Dynamic.__add__(int const &i)\n"
    "    Dynamic Dynamic.__add__(double const &d)\n"
    "    Dynamic Dynamic.__add__(float const &d)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___mod__(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator %", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator %", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator %", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (double)((Dynamic const *)arg1)->operator %((Dynamic const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.-@

  call-seq:
    -@ -> double

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___neg__(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  result = (double)((Dynamic const *)arg1)->operator -();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::Dynamic.-

  call-seq:
    -(inRHS) -> double
    -(inRHS) -> double
    -(inRHS) -> double
    -(inRHS) -> double

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Dynamic___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (double)((Dynamic const *)arg1)->operator -((Dynamic const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator -((double const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator -((float const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___sub____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator -", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator -((int const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___sub____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__sub__", 
    "    double Dynamic.__sub__(Dynamic const &inRHS)\n"
    "    double Dynamic.__sub__(double const &inRHS)\n"
    "    double Dynamic.__sub__(float const &inRHS)\n"
    "    double Dynamic.__sub__(int const &inRHS)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (double)((Dynamic const *)arg1)->operator *((Dynamic const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator *((double const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator *((float const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator *((int const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__mul__", 
    "    double Dynamic.__mul__(Dynamic const &inRHS)\n"
    "    double Dynamic.__mul__(double const &inRHS)\n"
    "    double Dynamic.__mul__(float const &inRHS)\n"
    "    double Dynamic.__mul__(int const &inRHS)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  Dynamic *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  result = (double)((Dynamic const *)arg1)->operator /((Dynamic const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator /((double const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___div____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator /((float const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic___div____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (double)((Dynamic const *)arg1)->operator /((int const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Dynamic___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Dynamic, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dynamic___div____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___div____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___div____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dynamic___div____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Dynamic.__div__", 
    "    double Dynamic.__div__(Dynamic const &inRHS)\n"
    "    double Dynamic.__div__(double const &inRHS)\n"
    "    double Dynamic.__div__(float const &inRHS)\n"
    "    double Dynamic.__div__(int const &inRHS)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_ThrowBadFunctionError(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  Dynamic::ThrowBadFunctionError();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Dynamic_CheckFPtr(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = (Dynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic *","CheckFPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  (arg1)->CheckFPtr();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_Dynamic(Dynamic *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CreateMemberFunction0(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunction0 arg2 = (hx::MemberFunction0) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunction0", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunction0","hx::CreateMemberFunction0", 2, argv[1] )); 
    }
  }
  result = hx::CreateMemberFunction0(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateMemberFunction1(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunction1 arg2 = (hx::MemberFunction1) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunction1", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunction1","hx::CreateMemberFunction1", 2, argv[1] )); 
    }
  }
  result = hx::CreateMemberFunction1(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateMemberFunction2(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunction2 arg2 = (hx::MemberFunction2) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunction2", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunction2","hx::CreateMemberFunction2", 2, argv[1] )); 
    }
  }
  result = hx::CreateMemberFunction2(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateMemberFunction3(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunction3 arg2 = (hx::MemberFunction3) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunction3", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunction3","hx::CreateMemberFunction3", 2, argv[1] )); 
    }
  }
  result = hx::CreateMemberFunction3(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateMemberFunction4(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunction4 arg2 = (hx::MemberFunction4) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunction4", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunction4","hx::CreateMemberFunction4", 2, argv[1] )); 
    }
  }
  result = hx::CreateMemberFunction4(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateMemberFunction5(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunction5 arg2 = (hx::MemberFunction5) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunction5", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunction5","hx::CreateMemberFunction5", 2, argv[1] )); 
    }
  }
  result = hx::CreateMemberFunction5(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateMemberFunctionVar(int argc, VALUE *argv, VALUE self) {
  hx::Object *arg1 = (hx::Object *) 0 ;
  hx::MemberFunctionVar arg2 = (hx::MemberFunctionVar) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_hx__Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Object *","hx::CreateMemberFunctionVar", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< hx::Object * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::MemberFunctionVar","hx::CreateMemberFunctionVar", 2, argv[1] )); 
    }
  }
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","hx::CreateMemberFunctionVar", 3, argv[2] ));
  } 
  arg3 = static_cast< int >(val3);
  result = hx::CreateMemberFunctionVar(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunction0(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunction0 arg1 = (hx::StaticFunction0) 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f___Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunction0","hx::CreateStaticFunction0", 1, argv[0] )); 
    }
  }
  result = hx::CreateStaticFunction0(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunction1(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunction1 arg1 = (hx::StaticFunction1) 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunction1","hx::CreateStaticFunction1", 1, argv[0] )); 
    }
  }
  result = hx::CreateStaticFunction1(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunction2(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunction2 arg1 = (hx::StaticFunction2) 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunction2","hx::CreateStaticFunction2", 1, argv[0] )); 
    }
  }
  result = hx::CreateStaticFunction2(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunction3(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunction3 arg1 = (hx::StaticFunction3) 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunction3","hx::CreateStaticFunction3", 1, argv[0] )); 
    }
  }
  result = hx::CreateStaticFunction3(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunction4(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunction4 arg1 = (hx::StaticFunction4) 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunction4","hx::CreateStaticFunction4", 1, argv[0] )); 
    }
  }
  result = hx::CreateStaticFunction4(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunction5(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunction5 arg1 = (hx::StaticFunction5) 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunction5","hx::CreateStaticFunction5", 1, argv[0] )); 
    }
  }
  result = hx::CreateStaticFunction5(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CreateStaticFunctionVar(int argc, VALUE *argv, VALUE self) {
  hx::StaticFunctionVar arg1 = (hx::StaticFunctionVar) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_r_q_const__Array__Dynamic____Dynamic);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "hx::StaticFunctionVar","hx::CreateStaticFunctionVar", 1, argv[0] )); 
    }
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","hx::CreateStaticFunctionVar", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = hx::CreateStaticFunctionVar(arg1,arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GetIntClass(int argc, VALUE *argv, VALUE self) {
  Class *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Class *) &hx::GetIntClass();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Class, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GetFloatClass(int argc, VALUE *argv, VALUE self) {
  Class *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Class *) &hx::GetFloatClass();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Class, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GetBoolClass(int argc, VALUE *argv, VALUE self) {
  Class *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Class *) &hx::GetBoolClass();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Class, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GetVoidClass(int argc, VALUE *argv, VALUE self) {
  Class *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Class *) &hx::GetVoidClass();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Class, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GetStringClass(int argc, VALUE *argv, VALUE self) {
  Class *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Class *) &hx::GetStringClass();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Class, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassDatum_obj;

SWIGINTERN VALUE
_wrap_Datum_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::Datum_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Datum_obj_toString(int argc, VALUE *argv, VALUE self) {
  coopy::Datum_obj *arg1 = (coopy::Datum_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Datum_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Datum_obj *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Datum_obj * >(argp1);
  result = (arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Datum_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Datum_obj *arg1 = (coopy::Datum_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Datum_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Datum_obj *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Datum_obj * >(argp1);
  result = (arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_Datum_obj(coopy::Datum_obj *arg1) {
    delete arg1;
}

static swig_class SwigClassBag_obj;

SWIGINTERN VALUE
_wrap_Bag_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::Bag_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Bag_obj_getItemView(int argc, VALUE *argv, VALUE self) {
  coopy::Bag_obj *arg1 = (coopy::Bag_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Bag_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Bag_obj *","getItemView", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Bag_obj * >(argp1);
  result = (arg1)->getItemView();
  vresult = SWIG_NewPointerObj((new ::coopy::View(static_cast< const ::coopy::View& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Bag_obj_getItemView_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Bag_obj *arg1 = (coopy::Bag_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Bag_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Bag_obj *","getItemView_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Bag_obj * >(argp1);
  result = (arg1)->getItemView_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Bag_obj_getItem(int argc, VALUE *argv, VALUE self) {
  coopy::Bag_obj *arg1 = (coopy::Bag_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::coopy::Datum result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Bag_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Bag_obj *","getItem", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Bag_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getItem", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getItem(arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::Datum(static_cast< const ::coopy::Datum& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Bag_obj_getItem_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Bag_obj *arg1 = (coopy::Bag_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Bag_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Bag_obj *","getItem_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Bag_obj * >(argp1);
  result = (arg1)->getItem_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_Bag_obj(coopy::Bag_obj *arg1) {
    delete arg1;
}

static swig_class SwigClassView_obj;

SWIGINTERN VALUE
_wrap_View_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::View_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_toDatum(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  ::String arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::coopy::Datum result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","toDatum", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String","toDatum", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String","toDatum", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::String * >(argp2));
    }
  }
  result = (arg1)->toDatum(arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::Datum(static_cast< const ::coopy::Datum& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_toDatum_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","toDatum_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  result = (arg1)->toDatum_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_equals(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  ::coopy::Datum arg2 ;
  ::coopy::Datum arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","equals", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Datum","equals", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","equals", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Datum * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Datum","equals", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","equals", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Datum * >(argp3));
    }
  }
  result = (bool)(arg1)->equals(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_equals_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","equals_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  result = (arg1)->equals_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_hasStructure(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  ::coopy::Datum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","hasStructure", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Datum","hasStructure", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","hasStructure", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Datum * >(argp2));
    }
  }
  result = (bool)(arg1)->hasStructure(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_hasStructure_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","hasStructure_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  result = (arg1)->hasStructure_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_getTable(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  ::coopy::Datum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","getTable", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Datum","getTable", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","getTable", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Datum * >(argp2));
    }
  }
  result = (arg1)->getTable(arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_getTable_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","getTable_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  result = (arg1)->getTable_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_getBag(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  ::coopy::Datum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Bag_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","getBag", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Datum","getBag", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","getBag", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Datum * >(argp2));
    }
  }
  result = (arg1)->getBag(arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::Bag(static_cast< const ::coopy::Bag& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_getBag_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","getBag_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  result = (arg1)->getBag_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_toString(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  ::coopy::Datum arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Datum","toString", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","toString", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Datum * >(argp2));
    }
  }
  result = (arg1)->toString(arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_View_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::View_obj *arg1 = (coopy::View_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__View_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::View_obj *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::View_obj * >(argp1);
  result = (arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_View_obj(coopy::View_obj *arg1) {
    delete arg1;
}

static swig_class SwigClassSimpleCell_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_SimpleCell_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_SimpleCell_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__SimpleCell_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_SimpleCell_obj(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::SimpleCell_obj *)new coopy::SimpleCell_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  Dynamic arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic","__construct", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","__construct", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Dynamic * >(argp2));
    }
  }
  result = (arg1)->__construct(arg2);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___new(int argc, VALUE *argv, VALUE self) {
  Dynamic arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  hx::ObjectPtr< coopy::SimpleCell_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic","coopy::SimpleCell_obj::__new", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","coopy::SimpleCell_obj::__new", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< Dynamic * >(argp1));
    }
  }
  result = coopy::SimpleCell_obj::__new(arg1);
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::SimpleCell_obj >(static_cast< const hx::ObjectPtr< coopy::SimpleCell_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::SimpleCell_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::SimpleCell_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::SimpleCell_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::SimpleCell_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_SimpleCell_obj(coopy::SimpleCell_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SimpleCell_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::SimpleCell_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::SimpleCell_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj_asDatum(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Datum_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","asDatum", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  result = (arg1)->asDatum();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Datum_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Datum_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___ToInterface(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  type_info *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","__ToInterface", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_type_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "type_info const &","__ToInterface", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "type_info const &","__ToInterface", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< type_info * >(argp2);
  result = (hx::Object *)(arg1)->__ToInterface((type_info const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  result = ((coopy::SimpleCell_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj_toString(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  result = (arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  result = (arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj_datum_set(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  Dynamic *arg2 = (Dynamic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","datum", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Dynamic, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Dynamic *","datum", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Dynamic * >(argp2);
  if (arg1) (arg1)->datum = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleCell_obj_datum_get(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleCell_obj *arg1 = (coopy::SimpleCell_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleCell_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleCell_obj *","datum", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleCell_obj * >(argp1);
  result = (Dynamic *)& ((arg1)->datum);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dynamic, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassSimpleTable_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_SimpleTable_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_SimpleTable_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__SimpleTable_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_SimpleTable_obj(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::SimpleTable_obj *)new coopy::SimpleTable_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","__construct", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","__construct", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->__construct(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___new(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  hx::ObjectPtr< coopy::SimpleTable_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","coopy::SimpleTable_obj::__new", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","coopy::SimpleTable_obj::__new", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = coopy::SimpleTable_obj::__new(arg1,arg2);
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::SimpleTable_obj >(static_cast< const hx::ObjectPtr< coopy::SimpleTable_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::SimpleTable_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::SimpleTable_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::SimpleTable_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::SimpleTable_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_SimpleTable_obj(coopy::SimpleTable_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_SimpleTable_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::SimpleTable_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::SimpleTable_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_asDatum(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Datum_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","asDatum", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->asDatum();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Datum_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Datum_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_asBag(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Bag_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","asBag", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->asBag();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Bag_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Bag_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_asTable(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ::hx::ObjectPtr< ::coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","asTable", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->asTable();
  vresult = SWIG_NewPointerObj((new ::hx::ObjectPtr< ::coopy::Table_obj >(static_cast< const ::hx::ObjectPtr< ::coopy::Table_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___ToInterface(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  type_info *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","__ToInterface", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_type_info,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "type_info const &","__ToInterface", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "type_info const &","__ToInterface", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< type_info * >(argp2);
  result = (hx::Object *)(arg1)->__ToInterface((type_info const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = ((coopy::SimpleTable_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_trimBlank(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","trimBlank", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (bool)(arg1)->trimBlank();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_trimBlank_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","trimBlank_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->trimBlank_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_insertOrDeleteColumns(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  Array< int > arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","insertOrDeleteColumns", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ArrayT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Array< int >","insertOrDeleteColumns", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Array< int >","insertOrDeleteColumns", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Array< int > * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","insertOrDeleteColumns", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->insertOrDeleteColumns(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_insertOrDeleteColumns_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","insertOrDeleteColumns_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->insertOrDeleteColumns_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_insertOrDeleteRows(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  Array< int > arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","insertOrDeleteRows", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_ArrayT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Array< int >","insertOrDeleteRows", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Array< int >","insertOrDeleteRows", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Array< int > * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","insertOrDeleteRows", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->insertOrDeleteRows(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_insertOrDeleteRows_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","insertOrDeleteRows_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->insertOrDeleteRows_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_clear(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->clear();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_clear_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","clear_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->clear_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_resize(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","resize", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)(arg1)->resize(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_resize_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","resize_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->resize_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_isResizable(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","isResizable", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (bool)(arg1)->isResizable();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_isResizable_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","isResizable_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->isResizable_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getItemView(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getItemView", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getItemView();
  vresult = SWIG_NewPointerObj((new ::coopy::View(static_cast< const ::coopy::View& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getItemView_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getItemView_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getItemView_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getCellView(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getCellView", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getCellView();
  vresult = SWIG_NewPointerObj((new ::coopy::View(static_cast< const ::coopy::View& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getCellView_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getCellView_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getCellView_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_toString(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getItem(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::coopy::Datum result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getItem", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getItem", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->getItem(arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::Datum(static_cast< const ::coopy::Datum& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getItem_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getItem_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getItem_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_setCell(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  ::coopy::Datum arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","setCell", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","setCell", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","setCell", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::coopy::Datum","setCell", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","setCell", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::coopy::Datum * >(argp4));
    }
  }
  result = (arg1)->setCell(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_setCell_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","setCell_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->setCell_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getCell(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ::coopy::Datum result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getCell", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getCell", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","getCell", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->getCell(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::coopy::Datum(static_cast< const ::coopy::Datum& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getCell_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getCell_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getCell_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_get_size(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","get_size", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (int)(arg1)->get_size();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_get_size_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","get_size_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->get_size_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_get_height(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","get_height", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (int)(arg1)->get_height();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_get_height_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","get_height_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->get_height_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_get_width(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","get_width", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (int)(arg1)->get_width();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_get_width_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","get_width_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->get_width_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getTable(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getTable", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getTable();
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_getTable_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","getTable_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (arg1)->getTable_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_bag_set(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  ::coopy::Bag *arg2 = (::coopy::Bag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","bag", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Bag *","bag", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Bag * >(argp2);
  if (arg1) (arg1)->bag = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_bag_get(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Bag *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","bag", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (::coopy::Bag *)& ((arg1)->bag);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Bag_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_h_set(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","h", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","h", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->h = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_h_get(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","h", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (int) ((arg1)->h);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_w_set(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","w", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","w", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->w = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_w_get(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","w", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (int) ((arg1)->w);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_data_set(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  ::haxe::ds::IntMap *arg2 = (::haxe::ds::IntMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::haxe::ds::IntMap *","data", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::haxe::ds::IntMap * >(argp2);
  if (arg1) (arg1)->data = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_data_get(int argc, VALUE *argv, VALUE self) {
  coopy::SimpleTable_obj *arg1 = (coopy::SimpleTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::haxe::ds::IntMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__SimpleTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::SimpleTable_obj *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::SimpleTable_obj * >(argp1);
  result = (::haxe::ds::IntMap *)& ((arg1)->data);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_tableToString(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::coopy::Table","coopy::SimpleTable_obj::tableToString", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::SimpleTable_obj::tableToString", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< ::coopy::Table * >(argp1));
    }
  }
  result = coopy::SimpleTable_obj::tableToString(arg1);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_SimpleTable_obj_tableToString_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::SimpleTable_obj::tableToString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassCoopy_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Coopy_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Coopy_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__Coopy_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Coopy_obj(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::Coopy_obj *)new coopy::Coopy_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *arg1 = (coopy::Coopy_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Coopy_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Coopy_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Coopy_obj * >(argp1);
  result = (arg1)->__construct();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___new(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::Coopy_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::__new();
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::Coopy_obj >(static_cast< const hx::ObjectPtr< coopy::Coopy_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Coopy_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::Coopy_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::Coopy_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::Coopy_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_Coopy_obj(coopy::Coopy_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Coopy_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::Coopy_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::Coopy_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *arg1 = (coopy::Coopy_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Coopy_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Coopy_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Coopy_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *arg1 = (coopy::Coopy_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Coopy_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Coopy_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Coopy_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *arg1 = (coopy::Coopy_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Coopy_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Coopy_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Coopy_obj * >(argp1);
  result = ((coopy::Coopy_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_format_preference_set(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *arg1 = (coopy::Coopy_obj *) 0 ;
  ::String *arg2 = (::String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Coopy_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Coopy_obj *","format_preference", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Coopy_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String *","format_preference", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  if (arg1) (arg1)->format_preference = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_format_preference_get(int argc, VALUE *argv, VALUE self) {
  coopy::Coopy_obj *arg1 = (coopy::Coopy_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Coopy_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Coopy_obj *","format_preference", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Coopy_obj * >(argp1);
  result = (::String *)& ((arg1)->format_preference);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_String, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_compareTables(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg1 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::coopy::CompareTable result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::compareTables", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::compareTables", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< ::coopy::Table * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::compareTables", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::compareTables", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  result = coopy::Coopy_obj::compareTables(arg1,arg2);
  vresult = SWIG_NewPointerObj((new ::coopy::CompareTable(static_cast< const ::coopy::CompareTable& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_compareTables_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::compareTables_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_compareTables3(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg1 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ::coopy::CompareTable result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::compareTables3", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::compareTables3", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< ::coopy::Table * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::compareTables3", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::compareTables3", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::compareTables3", 3, argv[2] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::compareTables3", 3, argv[2]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = coopy::Coopy_obj::compareTables3(arg1,arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::coopy::CompareTable(static_cast< const ::coopy::CompareTable& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_compareTables3_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::compareTables3_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_randomTests(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)coopy::Coopy_obj::randomTests();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_randomTests_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::randomTests_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_main(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (int)coopy::Coopy_obj::main();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_main_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::main_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_show(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::show", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::show", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< ::coopy::Table * >(argp1));
    }
  }
  result = coopy::Coopy_obj::show(arg1);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_show_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::show_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_jsonify(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::coopy::Table","coopy::Coopy_obj::jsonify", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","coopy::Coopy_obj::jsonify", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< ::coopy::Table * >(argp1));
    }
  }
  result = coopy::Coopy_obj::jsonify(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Coopy_obj_jsonify_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Coopy_obj::jsonify_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassCompareFlags_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CompareFlags_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CompareFlags_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__CompareFlags_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CompareFlags_obj(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::CompareFlags_obj *)new coopy::CompareFlags_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  result = (arg1)->__construct();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___new(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::ObjectPtr< coopy::CompareFlags_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::CompareFlags_obj::__new();
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::CompareFlags_obj >(static_cast< const hx::ObjectPtr< coopy::CompareFlags_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::CompareFlags_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::CompareFlags_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::CompareFlags_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::CompareFlags_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_CompareFlags_obj(coopy::CompareFlags_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CompareFlags_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::CompareFlags_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::CompareFlags_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  result = ((coopy::CompareFlags_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj_unchanged_context_set(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","unchanged_context", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","unchanged_context", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->unchanged_context = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj_unchanged_context_get(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","unchanged_context", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  result = (int) ((arg1)->unchanged_context);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj_show_unchanged_set(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","show_unchanged", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","show_unchanged", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->show_unchanged = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj_show_unchanged_get(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","show_unchanged", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  result = (bool) ((arg1)->show_unchanged);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj_always_show_header_set(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","always_show_header", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","always_show_header", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->always_show_header = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareFlags_obj_always_show_header_get(int argc, VALUE *argv, VALUE self) {
  coopy::CompareFlags_obj *arg1 = (coopy::CompareFlags_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareFlags_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareFlags_obj *","always_show_header", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareFlags_obj * >(argp1);
  result = (bool) ((arg1)->always_show_header);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassCompareTable_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_CompareTable_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_CompareTable_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__CompareTable_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_CompareTable_obj(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::CompareTable_obj *)new coopy::CompareTable_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->__construct();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::CompareTable_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::CompareTable_obj::__new();
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::CompareTable_obj >(static_cast< const hx::ObjectPtr< coopy::CompareTable_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::CompareTable_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::CompareTable_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::CompareTable_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::CompareTable_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_CompareTable_obj(coopy::CompareTable_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_CompareTable_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::CompareTable_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::CompareTable_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = ((coopy::CompareTable_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_getIndexes(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Array< hx::ObjectPtr< coopy::IndexPair_obj > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","getIndexes", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->getIndexes();
  vresult = SWIG_NewPointerObj((new Array< ::coopy::IndexPair >(static_cast< const Array< ::coopy::IndexPair >& >(result))), SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_getIndexes_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","getIndexes_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->getIndexes_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_storeIndexes(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","storeIndexes", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->storeIndexes();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_storeIndexes_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","storeIndexes_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->storeIndexes_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_compareCore(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","compareCore", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (bool)(arg1)->compareCore();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_compareCore_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","compareCore_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->compareCore_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_isEqual2(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","isEqual2", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","isEqual2", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","isEqual2", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","isEqual2", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","isEqual2", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = (bool)(arg1)->isEqual2(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_isEqual2_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","isEqual2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->isEqual2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_testIsEqual(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","testIsEqual", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (bool)(arg1)->testIsEqual();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_testIsEqual_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","testIsEqual_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->testIsEqual_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_hasSameColumns2(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","hasSameColumns2", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","hasSameColumns2", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","hasSameColumns2", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","hasSameColumns2", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","hasSameColumns2", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = (bool)(arg1)->hasSameColumns2(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_hasSameColumns2_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","hasSameColumns2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->hasSameColumns2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_testHasSameColumns(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","testHasSameColumns", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (bool)(arg1)->testHasSameColumns();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_testHasSameColumns_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","testHasSameColumns_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->testHasSameColumns_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_alignColumns(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","alignColumns", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","alignColumns", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","alignColumns", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","alignColumns", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignColumns", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::coopy::Table","alignColumns", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignColumns", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::coopy::Table * >(argp4));
    }
  }
  result = (arg1)->alignColumns(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_alignColumns_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","alignColumns_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->alignColumns_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_alignCore2(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","alignCore2", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","alignCore2", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","alignCore2", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","alignCore2", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignCore2", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::coopy::Table","alignCore2", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","alignCore2", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::coopy::Table * >(argp4));
    }
  }
  result = (arg1)->alignCore2(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_alignCore2_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","alignCore2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->alignCore2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_alignCore(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  ::coopy::Alignment arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","alignCore", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","alignCore", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","alignCore", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  result = (arg1)->alignCore(arg2);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_alignCore_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","alignCore_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->alignCore_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_getComparisonState(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::TableComparisonState_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","getComparisonState", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->getComparisonState();
  vresult = SWIG_NewPointerObj((new ::coopy::TableComparisonState(static_cast< const ::coopy::TableComparisonState& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_getComparisonState_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","getComparisonState_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->getComparisonState_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_align(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->align();
  vresult = SWIG_NewPointerObj((new ::coopy::Alignment(static_cast< const ::coopy::Alignment& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_align_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","align_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->align_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_attach(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::TableComparisonState_obj > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","attach", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::TableComparisonState","attach", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::TableComparisonState","attach", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::TableComparisonState * >(argp2));
    }
  }
  result = (bool)(arg1)->attach(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_attach_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","attach_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (arg1)->attach_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_indexes_set(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  Array< ::coopy::IndexPair > *arg2 = (Array< ::coopy::IndexPair > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","indexes", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Array< ::coopy::IndexPair > *","indexes", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Array< ::coopy::IndexPair > * >(argp2);
  if (arg1) (arg1)->indexes = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_indexes_get(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Array< ::coopy::IndexPair > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","indexes", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (Array< ::coopy::IndexPair > *)& ((arg1)->indexes);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_comp_set(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  ::coopy::TableComparisonState *arg2 = (::coopy::TableComparisonState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","comp", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::TableComparisonState *","comp", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::TableComparisonState * >(argp2);
  if (arg1) (arg1)->comp = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_CompareTable_obj_comp_get(int argc, VALUE *argv, VALUE self) {
  coopy::CompareTable_obj *arg1 = (coopy::CompareTable_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::TableComparisonState *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__CompareTable_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::CompareTable_obj *","comp", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::CompareTable_obj * >(argp1);
  result = (::coopy::TableComparisonState *)& ((arg1)->comp);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTableDiff_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_TableDiff_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_TableDiff_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__TableDiff_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_TableDiff_obj(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::TableDiff_obj *)new coopy::TableDiff_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  ::coopy::Alignment arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::CompareFlags_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment","__construct", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","__construct", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Alignment * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::CompareFlags","__construct", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::CompareFlags","__construct", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::CompareFlags * >(argp3));
    }
  }
  result = (arg1)->__construct(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___new(int argc, VALUE *argv, VALUE self) {
  ::coopy::Alignment arg1 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::CompareFlags_obj > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  hx::ObjectPtr< coopy::TableDiff_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::coopy::Alignment","coopy::TableDiff_obj::__new", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Alignment","coopy::TableDiff_obj::__new", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< ::coopy::Alignment * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::CompareFlags","coopy::TableDiff_obj::__new", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::CompareFlags","coopy::TableDiff_obj::__new", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::CompareFlags * >(argp2));
    }
  }
  result = coopy::TableDiff_obj::__new(arg1,arg2);
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::TableDiff_obj >(static_cast< const hx::ObjectPtr< coopy::TableDiff_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::TableDiff_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::TableDiff_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::TableDiff_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::TableDiff_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_TableDiff_obj(coopy::TableDiff_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_TableDiff_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::TableDiff_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::TableDiff_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = ((coopy::TableDiff_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_test(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Report_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","test", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (arg1)->test();
  vresult = SWIG_NewPointerObj((new ::coopy::Report(static_cast< const ::coopy::Report& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Report_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_test_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","test_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (arg1)->test_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_hilite(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","hilite", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","hilite", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","hilite", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  result = (bool)(arg1)->hilite(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_hilite_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","hilite_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (arg1)->hilite_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_quoteForDiff(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::View_obj > > arg2 ;
  ::coopy::Datum arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","quoteForDiff", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__View_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::View","quoteForDiff", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::View","quoteForDiff", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::View * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Datum","quoteForDiff", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Datum","quoteForDiff", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Datum * >(argp3));
    }
  }
  result = (arg1)->quoteForDiff(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_quoteForDiff_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","quoteForDiff_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (arg1)->quoteForDiff_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_getSeparator(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  ::String arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","getSeparator", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","getSeparator", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","getSeparator", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","getSeparator", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","getSeparator", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_String,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "::String","getSeparator", 4, argv[2] )); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String","getSeparator", 4, argv[2]));
    } else {
      arg4 = *(reinterpret_cast< ::String * >(argp4));
    }
  }
  result = (arg1)->getSeparator(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_getSeparator_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","getSeparator_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (arg1)->getSeparator_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_flags_set(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  ::coopy::CompareFlags *arg2 = (::coopy::CompareFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::CompareFlags *","flags", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::CompareFlags * >(argp2);
  if (arg1) (arg1)->flags = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_flags_get(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::CompareFlags *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","flags", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (::coopy::CompareFlags *)& ((arg1)->flags);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_align_set(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  ::coopy::Alignment *arg2 = (::coopy::Alignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment *","align", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Alignment * >(argp2);
  if (arg1) (arg1)->align = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TableDiff_obj_align_get(int argc, VALUE *argv, VALUE self) {
  coopy::TableDiff_obj *arg1 = (coopy::TableDiff_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__TableDiff_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::TableDiff_obj *","align", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::TableDiff_obj * >(argp1);
  result = (::coopy::Alignment *)& ((arg1)->align);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassAlignment_obj;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Alignment_obj_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Alignment_obj_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_coopy__Alignment_obj);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Alignment_obj(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (coopy::Alignment_obj *)new coopy::Alignment_obj();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___construct(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","__construct", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->__construct();
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___new(int argc, VALUE *argv, VALUE self) {
  hx::ObjectPtr< coopy::Alignment_obj > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Alignment_obj::__new();
  vresult = SWIG_NewPointerObj((new hx::ObjectPtr< coopy::Alignment_obj >(static_cast< const hx::ObjectPtr< coopy::Alignment_obj >& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___CreateEmpty(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = coopy::Alignment_obj::__CreateEmpty();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___Create(int argc, VALUE *argv, VALUE self) {
  hx::DynamicArray arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__DynamicArray,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::DynamicArray","coopy::Alignment_obj::__Create", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::DynamicArray","coopy::Alignment_obj::__Create", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::DynamicArray * >(argp1));
    }
  }
  result = coopy::Alignment_obj::__Create(arg1);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_coopy_Alignment_obj(coopy::Alignment_obj *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Alignment_obj___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::Alignment_obj::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___register(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  coopy::Alignment_obj::__register();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___Mark(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  hx::MarkContext *arg2 = (hx::MarkContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","__Mark", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__MarkContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::MarkContext *","__Mark", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::MarkContext * >(argp2);
  (arg1)->__Mark(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___Visit(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  hx::VisitContext *arg2 = (hx::VisitContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","__Visit", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__VisitContext, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "hx::VisitContext *","__Visit", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< hx::VisitContext * >(argp2);
  (arg1)->__Visit(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj___ToString(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj const *","__ToString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = ((coopy::Alignment_obj const *)arg1)->__ToString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toOrder2(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Ordering_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toOrder2", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toOrder2();
  vresult = SWIG_NewPointerObj((new ::coopy::Ordering(static_cast< const ::coopy::Ordering& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toOrder2_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toOrder2_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toOrder2_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toOrder3(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Ordering_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toOrder3", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toOrder3();
  vresult = SWIG_NewPointerObj((new ::coopy::Ordering(static_cast< const ::coopy::Ordering& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toOrder3_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toOrder3_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toOrder3_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getTargetHeader(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getTargetHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int)(arg1)->getTargetHeader();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getTargetHeader_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getTargetHeader_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->getTargetHeader_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getSourceHeader(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getSourceHeader", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int)(arg1)->getSourceHeader();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getSourceHeader_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getSourceHeader_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->getSourceHeader_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getTarget(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getTarget", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->getTarget();
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getTarget_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getTarget_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->getTarget_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getSource(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getSource", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->getSource();
  vresult = SWIG_NewPointerObj((new ::coopy::Table(static_cast< const ::coopy::Table& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_getSource_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","getSource_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->getSource_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toOrder(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Ordering_obj > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toOrder", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toOrder();
  vresult = SWIG_NewPointerObj((new ::coopy::Ordering(static_cast< const ::coopy::Ordering& >(result))), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toOrder_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toOrder_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toOrder_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toString(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_toString_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_count(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","count", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int)(arg1)->count();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_count_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","count_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->count_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_b2a(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","b2a", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","b2a", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->b2a(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_b2a_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","b2a_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->b2a_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_a2b(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","a2b", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","a2b", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->a2b(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_a2b_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","a2b_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->a2b_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_link(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","link", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","link", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","link", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->link(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_link_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","link_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->link_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_setRowlike(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","setRowlike", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","setRowlike", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (arg1)->setRowlike(arg2);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_setRowlike_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","setRowlike_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->setRowlike_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_headers(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","headers", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","headers", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","headers", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->headers(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_headers_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","headers_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->headers_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_tables(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg2 ;
  SwigValueWrapper< hx::ObjectPtr< coopy::Table_obj > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","tables", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table","tables", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","tables", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::coopy::Table * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "::coopy::Table","tables", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::coopy::Table","tables", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< ::coopy::Table * >(argp3));
    }
  }
  result = (arg1)->tables(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_tables_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","tables_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->tables_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_range(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Void result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","range", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","range", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","range", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  result = (arg1)->range(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Void(static_cast< const Void& >(result))), SWIGTYPE_p_Void, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_range_dyn(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","range_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (arg1)->range_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_meta_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::coopy::Alignment *arg2 = (::coopy::Alignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","meta", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment *","meta", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Alignment * >(argp2);
  if (arg1) (arg1)->meta = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_meta_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","meta", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::coopy::Alignment *)& ((arg1)->meta);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_reference_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::coopy::Alignment *arg2 = (::coopy::Alignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","reference", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Alignment *","reference", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Alignment * >(argp2);
  if (arg1) (arg1)->reference = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_reference_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Alignment *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","reference", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::coopy::Alignment *)& ((arg1)->reference);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_order_cache_has_reference_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","order_cache_has_reference", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","order_cache_has_reference", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->order_cache_has_reference = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_order_cache_has_reference_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","order_cache_has_reference", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (bool) ((arg1)->order_cache_has_reference);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_order_cache_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::coopy::Ordering *arg2 = (::coopy::Ordering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","order_cache", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Ordering *","order_cache", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Ordering * >(argp2);
  if (arg1) (arg1)->order_cache = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_order_cache_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Ordering *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","order_cache", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::coopy::Ordering *)& ((arg1)->order_cache);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Ordering_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_map_count_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","map_count", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","map_count", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->map_count = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_map_count_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","map_count", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int) ((arg1)->map_count);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ib_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ib", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ib", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ib = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ib_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ib", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int) ((arg1)->ib);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ia_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ia", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ia", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ia = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ia_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ia", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int) ((arg1)->ia);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_tb_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::coopy::Table *arg2 = (::coopy::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","tb", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table *","tb", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Table * >(argp2);
  if (arg1) (arg1)->tb = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_tb_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Table *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","tb", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::coopy::Table *)& ((arg1)->tb);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ta_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::coopy::Table *arg2 = (::coopy::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ta", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::coopy::Table *","ta", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::coopy::Table * >(argp2);
  if (arg1) (arg1)->ta = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ta_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::coopy::Table *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ta", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::coopy::Table *)& ((arg1)->ta);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_coopy__Table_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_hb_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","hb", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","hb", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->hb = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_hb_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","hb", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int) ((arg1)->hb);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ha_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ha", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","ha", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ha = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_ha_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","ha", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (int) ((arg1)->ha);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_map_b2a_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::haxe::ds::IntMap *arg2 = (::haxe::ds::IntMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","map_b2a", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::haxe::ds::IntMap *","map_b2a", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::haxe::ds::IntMap * >(argp2);
  if (arg1) (arg1)->map_b2a = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_map_b2a_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::haxe::ds::IntMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","map_b2a", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::haxe::ds::IntMap *)& ((arg1)->map_b2a);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_map_a2b_set(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  ::haxe::ds::IntMap *arg2 = (::haxe::ds::IntMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","map_a2b", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::haxe::ds::IntMap *","map_a2b", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< ::haxe::ds::IntMap * >(argp2);
  if (arg1) (arg1)->map_a2b = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Alignment_obj_map_a2b_get(int argc, VALUE *argv, VALUE self) {
  coopy::Alignment_obj *arg1 = (coopy::Alignment_obj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::haxe::ds::IntMap *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_coopy__Alignment_obj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "coopy::Alignment_obj *","map_a2b", 1, self )); 
  }
  arg1 = reinterpret_cast< coopy::Alignment_obj * >(argp1);
  result = (::haxe::ds::IntMap *)& ((arg1)->map_a2b);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassString;

SWIGINTERN VALUE
_wrap_new_String__SWIG_0(int argc, VALUE *argv, VALUE self) {
  String *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (String *)new String();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_1(int argc, VALUE *argv, VALUE self) {
  HX_CHAR *arg1 = (HX_CHAR *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HX_CHAR const *","String", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< HX_CHAR * >(buf1);
  result = (String *)new String((HX_CHAR const *)arg1);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_2(int argc, VALUE *argv, VALUE self) {
  HX_CHAR *arg1 = (HX_CHAR *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  String *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "HX_CHAR const *","String", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< HX_CHAR * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","String", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (String *)new String((HX_CHAR const *)arg1,arg2);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_3(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  String *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","String", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","String", 2, argv[1] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (String *)new String((char const *)arg1,arg2);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_4(int argc, VALUE *argv, VALUE self) {
  ::String *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "::String const &","String", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","String", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< ::String * >(argp1);
  result = (String *)new String((::String const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_5(int argc, VALUE *argv, VALUE self) {
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","String", 1, argv[0] ));
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  result = (String *)new String((int const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_6(int argc, VALUE *argv, VALUE self) {
  cpp::CppInt32__ *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_cpp__CppInt32__,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "cpp::CppInt32__ const &","String", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "cpp::CppInt32__ const &","String", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< cpp::CppInt32__ * >(argp1);
  result = (String *)new String((cpp::CppInt32__ const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_7(int argc, VALUE *argv, VALUE self) {
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "double","String", 1, argv[0] ));
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = (String *)new String((double const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_8(int argc, VALUE *argv, VALUE self) {
  float *arg1 = 0 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "float","String", 1, argv[0] ));
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  result = (String *)new String((float const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_9(int argc, VALUE *argv, VALUE self) {
  bool *arg1 = 0 ;
  bool temp1 ;
  bool val1 ;
  int ecode1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "bool","String", 1, argv[0] ));
  } 
  temp1 = static_cast< bool >(val1);
  arg1 = &temp1;
  result = (String *)new String((bool const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_10(int argc, VALUE *argv, VALUE self) {
  null *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_null,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "null const &","String", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "null const &","String", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< null * >(argp1);
  result = (String *)new String((null const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_String__SWIG_11(int argc, VALUE *argv, VALUE self) {
  SwigValueWrapper< hx::Null< ::String > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_hx__NullT_String_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "hx::Null< ::String >","String", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "hx::Null< ::String >","String", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< hx::Null< ::String > * >(argp1));
    }
  }
  result = (String *)new String(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___boot(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  String::__boot();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___ToObject(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hx::Object *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","__ToObject", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (hx::Object *)((String const *)arg1)->__ToObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hx__Object, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_String_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_String_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_String);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_String__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Dynamic *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  String *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Dynamic,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Dynamic const &","String", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic const &","String", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Dynamic * >(argp1);
  result = (String *)new String((Dynamic const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_String(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_String__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cpp__CppInt32__, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_null, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_10(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hx__NullT_String_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_11(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dynamic, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_12(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_String__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_String__SWIG_8(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_String__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_String__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_String__SWIG_9(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_String__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_String__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "String.new", 
    "    String.new()\n"
    "    String.new(HX_CHAR const *inPtr)\n"
    "    String.new(HX_CHAR const *inPtr, int inLen)\n"
    "    String.new(char const *inPtr, int inLen)\n"
    "    String.new(::String const &inRHS)\n"
    "    String.new(int const &inRHS)\n"
    "    String.new(cpp::CppInt32__ const &inRHS)\n"
    "    String.new(double const &inRHS)\n"
    "    String.new(float const &inRHS)\n"
    "    String.new(bool const &inRHS)\n"
    "    String.new(null const &inRHS)\n"
    "    String.new(hx::Null< ::String > inRHS)\n"
    "    String.new(Dynamic const &inRHS)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_Default(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","Default", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","Default", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","Default", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (arg1)->Default((::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_toString(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","toString", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->toString();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___URLEncode(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","__URLEncode", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = ((String const *)arg1)->__URLEncode();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___URLDecode(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","__URLDecode", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = ((String const *)arg1)->__URLDecode();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.dup

  call-seq:
    dup -> String

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_String_dup(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (::String *) &(arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_String, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_toUpperCase(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","toUpperCase", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = ((String const *)arg1)->toUpperCase();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_toLowerCase(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","toLowerCase", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = ((String const *)arg1)->toLowerCase();
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_charAt(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","charAt", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","charAt", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((String const *)arg1)->charAt(arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_charCodeAt(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","charCodeAt", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","charCodeAt", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = ((String const *)arg1)->charCodeAt(arg2);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_indexOf(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  Dynamic arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","indexOf", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","indexOf", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","indexOf", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Dynamic","indexOf", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","indexOf", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< Dynamic * >(argp3));
    }
  }
  result = (int)((String const *)arg1)->indexOf((::String const &)*arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_lastIndexOf(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  Dynamic arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","lastIndexOf", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","lastIndexOf", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","lastIndexOf", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Dynamic","lastIndexOf", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","lastIndexOf", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< Dynamic * >(argp3));
    }
  }
  result = (int)((String const *)arg1)->lastIndexOf((::String const &)*arg2,arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_split(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Array< String > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","split", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","split", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","split", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = ((String const *)arg1)->split((::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Array< String >(static_cast< const Array< String >& >(result))), SWIGTYPE_p_ArrayT_String_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.substr

  call-seq:
    substr(inPos, inLen) -> String

Return a portion of the String.
*/
SWIGINTERN VALUE
_wrap_String_substr(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  Dynamic arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","substr", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","substr", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Dynamic","substr", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","substr", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< Dynamic * >(argp3));
    }
  }
  result = ((String const *)arg1)->substr(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_substring(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  Dynamic arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","substring", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","substring", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Dynamic,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Dynamic","substring", 3, argv[1] )); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Dynamic","substring", 3, argv[1]));
    } else {
      arg3 = *(reinterpret_cast< Dynamic * >(argp3));
    }
  }
  result = ((String const *)arg1)->substring(arg2,arg3);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_c_str(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HX_CHAR *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","c_str", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (HX_CHAR *)((String const *)arg1)->c_str();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___CStr(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","__CStr", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (char *)((String const *)arg1)->__CStr();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___WCStr(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  wchar_t *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","__WCStr", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (wchar_t *)((String const *)arg1)->__WCStr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wchar_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_fromCharCode(int argc, VALUE *argv, VALUE self) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "int","String::fromCharCode", 1, argv[0] ));
  } 
  arg1 = static_cast< int >(val1);
  result = String::fromCharCode(arg1);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.==

  call-seq:
    ==(inRHS) -> bool
    ==(inRHS) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_String___eq____SWIG_0(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  null *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_null,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "null const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "null const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< null * >(argp2);
  result = (bool)((String const *)arg1)->operator ==((null const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_getChar(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","getChar", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","getChar", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->getChar(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_compare(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","compare", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","compare", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","compare", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (int)((String const *)arg1)->compare((::String const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.+

  call-seq:
    +(inRHS) -> String
    +(inRHS) -> String
    +(inRHS) -> String
    +(inRHS) -> String
    +(inRHS) -> String
    +(inRHS) -> String
    +(inRHS) -> String

Add operator.
*/
SWIGINTERN VALUE
_wrap_String___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String","operator +", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String","operator +", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< ::String * >(argp2));
    }
  }
  result = ((String const *)arg1)->operator +(arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = ((String const *)arg1)->operator +((int const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  result = ((String const *)arg1)->operator +((bool const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___add____SWIG_3(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = ((String const *)arg1)->operator +((double const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___add____SWIG_4(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","operator +", 2, argv[0] ));
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = ((String const *)arg1)->operator +((float const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___add____SWIG_5(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  null *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_null,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "null const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "null const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< null * >(argp2);
  result = ((String const *)arg1)->operator +((null const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___add____SWIG_6(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  cpp::CppInt32__ *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_cpp__CppInt32__,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "cpp::CppInt32__ const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "cpp::CppInt32__ const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< cpp::CppInt32__ * >(argp2);
  result = ((String const *)arg1)->operator +((cpp::CppInt32__ const &)*arg2);
  vresult = SWIG_NewPointerObj((new ::String(static_cast< const ::String& >(result))), SWIGTYPE_p_String, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_String___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_String___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_null, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_String___add____SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cpp__CppInt32__, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_String___add____SWIG_6(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_String___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_String___add____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_String___add____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_String___add____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "String.__add__", 
    "    ::String String.__add__(::String inRHS)\n"
    "    ::String String.__add__(int const &inRHS)\n"
    "    ::String String.__add__(bool const &inRHS)\n"
    "    ::String String.__add__(double const &inRHS)\n"
    "    ::String String.__add__(float const &inRHS)\n"
    "    ::String String.__add__(null const &inRHS)\n"
    "    ::String String.__add__(cpp::CppInt32__ const &inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::String.==

  call-seq:
    ==(inRHS) -> bool
    ==(inRHS) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_String___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (bool)((String const *)arg1)->operator ==((::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_String___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_null, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_String___eq____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_String, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_String, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_String___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "String.__eq__", 
    "    bool String.__eq__(null const &inRHS)\n"
    "    bool String.__eq__(::String const &inRHS)\n");
  
  return Qnil;
}



/*
  Document-method: Coopyhx::String.<

  call-seq:
    <(inRHS) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_String___lt__(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (bool)((String const *)arg1)->operator <((::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.<=

  call-seq:
    <=(inRHS) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_String___le__(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (bool)((String const *)arg1)->operator <=((::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.>

  call-seq:
    >(inRHS) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_String___gt__(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (bool)((String const *)arg1)->operator >((::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Coopyhx::String.>=

  call-seq:
    >=(inRHS) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_String___ge__(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  result = (bool)((String const *)arg1)->operator >=((::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_cca(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String const *","cca", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","cca", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((String const *)arg1)->cca(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_fromCharCode_dyn(int argc, VALUE *argv, VALUE self) {
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = String::fromCharCode_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_charAt_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","charAt_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->charAt_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_charCodeAt_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","charCodeAt_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->charCodeAt_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_indexOf_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","indexOf_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->indexOf_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_lastIndexOf_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","lastIndexOf_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->lastIndexOf_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_split_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","split_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->split_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_substr_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","substr_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->substr_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_toLowerCase_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","toLowerCase_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->toLowerCase_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_toString_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","toString_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->toString_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_toUpperCase_dyn(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","toUpperCase_dyn", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (arg1)->toUpperCase_dyn();
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___Field(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  ::String *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  Dynamic result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","__Field", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_String,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "::String const &","__Field", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "::String const &","__Field", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< ::String * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","__Field", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->__Field((::String const &)*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Dynamic(static_cast< const Dynamic& >(result))), SWIGTYPE_p_Dynamic, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_length_set(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","length", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->length = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String_length_get(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","length", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (int) ((arg1)->length);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___s_set(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  HX_CHAR *arg2 = (HX_CHAR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","__s", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "HX_CHAR const *","__s", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< HX_CHAR * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->__s = (HX_CHAR const *)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->__s = 0;
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_String___s_get(int argc, VALUE *argv, VALUE self) {
  String *arg1 = (String *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HX_CHAR *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_String, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "String *","__s", 1, self )); 
  }
  arg1 = reinterpret_cast< String * >(argp1);
  result = (HX_CHAR *) ((arg1)->__s);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_String(String *arg1) {
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_coopy__Coopy_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::Coopy_obj *) x));
}
static void *_p_coopy__CompareFlags_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::CompareFlags_obj *) x));
}
static void *_p_coopy__TableDiff_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::TableDiff_obj *) x));
}
static void *_p_coopy__SimpleCell_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::SimpleCell_obj *) x));
}
static void *_p_coopy__SimpleTable_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::SimpleTable_obj *) x));
}
static void *_p_coopy__CompareTable_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::CompareTable_obj *) x));
}
static void *_p_coopy__Alignment_objTo_p_hx__Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::Object *)  ((coopy::Alignment_obj *) x));
}
static void *_p_DynamicTo_p_hx__ObjectPtrT_hx__Object_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((hx::ObjectPtr< hx::Object > *)  ((Dynamic *) x));
}
static swig_type_info _swigt__p_ArrayT_String_t = {"_p_ArrayT_String_t", "Array< String > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t = {"_p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t", "Array< hx::ObjectPtr< coopy::IndexPair_obj > > *|Array< ::coopy::IndexPair > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_int_t = {"_p_ArrayT_int_t", "Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Class = {"_p_Class", "Class *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Coopyhx = {"_p_Coopyhx", "Coopyhx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dynamic = {"_p_Dynamic", "Dynamic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OBJ_ = {"_p_OBJ_", "OBJ_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_String = {"_p_String", "::String *|String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Void = {"_p_Void", "Void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|HX_CHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__Alignment_obj = {"_p_coopy__Alignment_obj", "coopy::Alignment_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__Bag_obj = {"_p_coopy__Bag_obj", "coopy::Bag_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__CompareFlags_obj = {"_p_coopy__CompareFlags_obj", "coopy::CompareFlags_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__CompareTable_obj = {"_p_coopy__CompareTable_obj", "coopy::CompareTable_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__Coopy_obj = {"_p_coopy__Coopy_obj", "coopy::Coopy_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__Datum_obj = {"_p_coopy__Datum_obj", "coopy::Datum_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__SimpleCell_obj = {"_p_coopy__SimpleCell_obj", "coopy::SimpleCell_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__SimpleTable_obj = {"_p_coopy__SimpleTable_obj", "coopy::SimpleTable_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__TableDiff_obj = {"_p_coopy__TableDiff_obj", "coopy::TableDiff_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coopy__View_obj = {"_p_coopy__View_obj", "coopy::View_obj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_cpp__CppInt32__ = {"_p_cpp__CppInt32__", "cpp::CppInt32__ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f___Dynamic = {"_p_f___Dynamic", "Dynamic (*)()|hx::StaticFunction0", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object__Dynamic = {"_p_f_p_hx__Object__Dynamic", "Dynamic (*)(hx::Object *)|hx::MemberFunction0", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic = {"_p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic", "Dynamic (*)(hx::Object *,Array< Dynamic > const &)|hx::MemberFunctionVar", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object_r_q_const__Dynamic__Dynamic = {"_p_f_p_hx__Object_r_q_const__Dynamic__Dynamic", "Dynamic (*)(hx::Object *,Dynamic const &)|hx::MemberFunction1", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "hx::MemberFunction2|Dynamic (*)(hx::Object *,Dynamic const &,Dynamic const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "hx::MemberFunction3|Dynamic (*)(hx::Object *,Dynamic const &,Dynamic const &,Dynamic const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "hx::MemberFunction4|Dynamic (*)(hx::Object *,Dynamic const &,Dynamic const &,Dynamic const &,Dynamic const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "Dynamic (*)(hx::Object *,Dynamic const &,Dynamic const &,Dynamic const &,Dynamic const &,Dynamic const &)|hx::MemberFunction5", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Array__Dynamic____Dynamic = {"_p_f_r_q_const__Array__Dynamic____Dynamic", "Dynamic (*)(Array< Dynamic > const &)|hx::StaticFunctionVar", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Dynamic__Dynamic = {"_p_f_r_q_const__Dynamic__Dynamic", "Dynamic (*)(Dynamic const &)|hx::StaticFunction1", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "Dynamic (*)(Dynamic const &,Dynamic const &)|hx::StaticFunction2", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "Dynamic (*)(Dynamic const &,Dynamic const &,Dynamic const &)|hx::StaticFunction3", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "Dynamic (*)(Dynamic const &,Dynamic const &,Dynamic const &,Dynamic const &)|hx::StaticFunction4", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic = {"_p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic", "Dynamic (*)(Dynamic const &,Dynamic const &,Dynamic const &,Dynamic const &,Dynamic const &)|hx::StaticFunction5", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__DynamicArray = {"_p_hx__DynamicArray", "hx::DynamicArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__MarkContext = {"_p_hx__MarkContext", "hx::MarkContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__NullT_String_t = {"_p_hx__NullT_String_t", "hx::Null< ::String > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__Object = {"_p_hx__Object", "hx::Object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_IMap_obj_t = {"_p_hx__ObjectPtrT_IMap_obj_t", "hx::ObjectPtr< IMap_obj > *|IMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Alignment_obj_t = {"_p_hx__ObjectPtrT_coopy__Alignment_obj_t", "hx::ObjectPtr< coopy::Alignment_obj > *|::coopy::Alignment *|coopy::Alignment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Bag_obj_t = {"_p_hx__ObjectPtrT_coopy__Bag_obj_t", "::hx::ObjectPtr< ::coopy::Bag_obj > *|hx::ObjectPtr< coopy::Bag_obj > *|::coopy::Bag *|coopy::Bag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__CompareFlags_obj_t = {"_p_hx__ObjectPtrT_coopy__CompareFlags_obj_t", "hx::ObjectPtr< coopy::CompareFlags_obj > *|::coopy::CompareFlags *|coopy::CompareFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__CompareTable_obj_t = {"_p_hx__ObjectPtrT_coopy__CompareTable_obj_t", "coopy::CompareTable *|::coopy::CompareTable *|hx::ObjectPtr< coopy::CompareTable_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Coopy_obj_t = {"_p_hx__ObjectPtrT_coopy__Coopy_obj_t", "coopy::Coopy *|hx::ObjectPtr< coopy::Coopy_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Datum_obj_t = {"_p_hx__ObjectPtrT_coopy__Datum_obj_t", "::hx::ObjectPtr< ::coopy::Datum_obj > *|hx::ObjectPtr< coopy::Datum_obj > *|::coopy::Datum *|coopy::Datum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__IndexPair_obj_t = {"_p_hx__ObjectPtrT_coopy__IndexPair_obj_t", "hx::ObjectPtr< coopy::IndexPair_obj > *|coopy::IndexPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Ordering_obj_t = {"_p_hx__ObjectPtrT_coopy__Ordering_obj_t", "::coopy::Ordering *|coopy::Ordering *|hx::ObjectPtr< coopy::Ordering_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Report_obj_t = {"_p_hx__ObjectPtrT_coopy__Report_obj_t", "hx::ObjectPtr< coopy::Report_obj > *|::coopy::Report *|coopy::Report *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__SimpleCell_obj_t = {"_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t", "coopy::SimpleCell *|hx::ObjectPtr< coopy::SimpleCell_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__SimpleTable_obj_t = {"_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t", "coopy::SimpleTable *|hx::ObjectPtr< coopy::SimpleTable_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t = {"_p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t", "hx::ObjectPtr< coopy::TableComparisonState_obj > *|::coopy::TableComparisonState *|coopy::TableComparisonState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__TableDiff_obj_t = {"_p_hx__ObjectPtrT_coopy__TableDiff_obj_t", "coopy::TableDiff *|hx::ObjectPtr< coopy::TableDiff_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__Table_obj_t = {"_p_hx__ObjectPtrT_coopy__Table_obj_t", "::coopy::Table *|coopy::Table *|hx::ObjectPtr< coopy::Table_obj > *|::hx::ObjectPtr< ::coopy::Table_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_coopy__View_obj_t = {"_p_hx__ObjectPtrT_coopy__View_obj_t", "::coopy::View *|coopy::View *|hx::ObjectPtr< coopy::View_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t = {"_p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t", "::haxe::ds::IntMap *|haxe::ds::IntMap *|hx::ObjectPtr< haxe::ds::IntMap_obj > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__ObjectPtrT_hx__Object_t = {"_p_hx__ObjectPtrT_hx__Object_t", "hx::ObjectPtr< hx::Object > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hx__VisitContext = {"_p_hx__VisitContext", "hx::VisitContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_null = {"_p_null", "null *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_super = {"_p_super", "super *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_type_info = {"_p_type_info", "type_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArrayT_String_t,
  &_swigt__p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t,
  &_swigt__p_ArrayT_int_t,
  &_swigt__p_Class,
  &_swigt__p_Coopyhx,
  &_swigt__p_Dynamic,
  &_swigt__p_OBJ_,
  &_swigt__p_String,
  &_swigt__p_Void,
  &_swigt__p_char,
  &_swigt__p_coopy__Alignment_obj,
  &_swigt__p_coopy__Bag_obj,
  &_swigt__p_coopy__CompareFlags_obj,
  &_swigt__p_coopy__CompareTable_obj,
  &_swigt__p_coopy__Coopy_obj,
  &_swigt__p_coopy__Datum_obj,
  &_swigt__p_coopy__SimpleCell_obj,
  &_swigt__p_coopy__SimpleTable_obj,
  &_swigt__p_coopy__TableDiff_obj,
  &_swigt__p_coopy__View_obj,
  &_swigt__p_cpp__CppInt32__,
  &_swigt__p_f___Dynamic,
  &_swigt__p_f_p_hx__Object__Dynamic,
  &_swigt__p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic,
  &_swigt__p_f_p_hx__Object_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_r_q_const__Array__Dynamic____Dynamic,
  &_swigt__p_f_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  &_swigt__p_hx__DynamicArray,
  &_swigt__p_hx__MarkContext,
  &_swigt__p_hx__NullT_String_t,
  &_swigt__p_hx__Object,
  &_swigt__p_hx__ObjectPtrT_IMap_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Alignment_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Bag_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__CompareFlags_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__CompareTable_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Coopy_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Datum_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__IndexPair_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Ordering_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Report_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__SimpleCell_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__SimpleTable_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__TableDiff_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__Table_obj_t,
  &_swigt__p_hx__ObjectPtrT_coopy__View_obj_t,
  &_swigt__p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t,
  &_swigt__p_hx__ObjectPtrT_hx__Object_t,
  &_swigt__p_hx__VisitContext,
  &_swigt__p_null,
  &_swigt__p_super,
  &_swigt__p_type_info,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_ArrayT_String_t[] = {  {&_swigt__p_ArrayT_String_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t[] = {  {&_swigt__p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_int_t[] = {  {&_swigt__p_ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Class[] = {  {&_swigt__p_Class, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Coopyhx[] = {  {&_swigt__p_Coopyhx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dynamic[] = {  {&_swigt__p_Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OBJ_[] = {  {&_swigt__p_OBJ_, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_String[] = {  {&_swigt__p_String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Void[] = {  {&_swigt__p_Void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__Alignment_obj[] = {  {&_swigt__p_coopy__Alignment_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__Bag_obj[] = {  {&_swigt__p_coopy__Bag_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__CompareFlags_obj[] = {  {&_swigt__p_coopy__CompareFlags_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__CompareTable_obj[] = {  {&_swigt__p_coopy__CompareTable_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__Coopy_obj[] = {  {&_swigt__p_coopy__Coopy_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__Datum_obj[] = {  {&_swigt__p_coopy__Datum_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__SimpleCell_obj[] = {  {&_swigt__p_coopy__SimpleCell_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__SimpleTable_obj[] = {  {&_swigt__p_coopy__SimpleTable_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__TableDiff_obj[] = {  {&_swigt__p_coopy__TableDiff_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coopy__View_obj[] = {  {&_swigt__p_coopy__View_obj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cpp__CppInt32__[] = {  {&_swigt__p_cpp__CppInt32__, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f___Dynamic[] = {  {&_swigt__p_f___Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object__Dynamic[] = {  {&_swigt__p_f_p_hx__Object__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic[] = {  {&_swigt__p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_p_hx__Object_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Array__Dynamic____Dynamic[] = {  {&_swigt__p_f_r_q_const__Array__Dynamic____Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic[] = {  {&_swigt__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__DynamicArray[] = {  {&_swigt__p_hx__DynamicArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__MarkContext[] = {  {&_swigt__p_hx__MarkContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__NullT_String_t[] = {  {&_swigt__p_hx__NullT_String_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__Object[] = {  {&_swigt__p_coopy__Coopy_obj, _p_coopy__Coopy_objTo_p_hx__Object, 0, 0},  {&_swigt__p_coopy__CompareFlags_obj, _p_coopy__CompareFlags_objTo_p_hx__Object, 0, 0},  {&_swigt__p_coopy__TableDiff_obj, _p_coopy__TableDiff_objTo_p_hx__Object, 0, 0},  {&_swigt__p_hx__Object, 0, 0, 0},  {&_swigt__p_coopy__SimpleCell_obj, _p_coopy__SimpleCell_objTo_p_hx__Object, 0, 0},  {&_swigt__p_coopy__SimpleTable_obj, _p_coopy__SimpleTable_objTo_p_hx__Object, 0, 0},  {&_swigt__p_coopy__CompareTable_obj, _p_coopy__CompareTable_objTo_p_hx__Object, 0, 0},  {&_swigt__p_coopy__Alignment_obj, _p_coopy__Alignment_objTo_p_hx__Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_IMap_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_IMap_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Alignment_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Alignment_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Bag_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Bag_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__CompareFlags_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__CompareFlags_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__CompareTable_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__CompareTable_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Coopy_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Coopy_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Datum_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Datum_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__IndexPair_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__IndexPair_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Ordering_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Ordering_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Report_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Report_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__SimpleCell_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__SimpleTable_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__TableDiff_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__TableDiff_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__Table_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__Table_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_coopy__View_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_coopy__View_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t[] = {  {&_swigt__p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__ObjectPtrT_hx__Object_t[] = {  {&_swigt__p_Dynamic, _p_DynamicTo_p_hx__ObjectPtrT_hx__Object_t, 0, 0},  {&_swigt__p_hx__ObjectPtrT_hx__Object_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hx__VisitContext[] = {  {&_swigt__p_hx__VisitContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_null[] = {  {&_swigt__p_null, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_super[] = {  {&_swigt__p_super, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_type_info[] = {  {&_swigt__p_type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArrayT_String_t,
  _swigc__p_ArrayT_hx__ObjectPtrT_coopy__IndexPair_obj_t_t,
  _swigc__p_ArrayT_int_t,
  _swigc__p_Class,
  _swigc__p_Coopyhx,
  _swigc__p_Dynamic,
  _swigc__p_OBJ_,
  _swigc__p_String,
  _swigc__p_Void,
  _swigc__p_char,
  _swigc__p_coopy__Alignment_obj,
  _swigc__p_coopy__Bag_obj,
  _swigc__p_coopy__CompareFlags_obj,
  _swigc__p_coopy__CompareTable_obj,
  _swigc__p_coopy__Coopy_obj,
  _swigc__p_coopy__Datum_obj,
  _swigc__p_coopy__SimpleCell_obj,
  _swigc__p_coopy__SimpleTable_obj,
  _swigc__p_coopy__TableDiff_obj,
  _swigc__p_coopy__View_obj,
  _swigc__p_cpp__CppInt32__,
  _swigc__p_f___Dynamic,
  _swigc__p_f_p_hx__Object__Dynamic,
  _swigc__p_f_p_hx__Object_r_q_const__Array__Dynamic____Dynamic,
  _swigc__p_f_p_hx__Object_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_p_hx__Object_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_r_q_const__Array__Dynamic____Dynamic,
  _swigc__p_f_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_f_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic_r_q_const__Dynamic__Dynamic,
  _swigc__p_hx__DynamicArray,
  _swigc__p_hx__MarkContext,
  _swigc__p_hx__NullT_String_t,
  _swigc__p_hx__Object,
  _swigc__p_hx__ObjectPtrT_IMap_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Alignment_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Bag_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__CompareFlags_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__CompareTable_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Coopy_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Datum_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__IndexPair_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Ordering_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Report_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__SimpleCell_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__SimpleTable_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__TableComparisonState_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__TableDiff_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__Table_obj_t,
  _swigc__p_hx__ObjectPtrT_coopy__View_obj_t,
  _swigc__p_hx__ObjectPtrT_haxe__ds__IntMap_obj_t,
  _swigc__p_hx__ObjectPtrT_hx__Object_t,
  _swigc__p_hx__VisitContext,
  _swigc__p_null,
  _swigc__p_super,
  _swigc__p_type_info,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_coopyhx(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mCoopyhx = rb_define_module("Coopyhx");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassCoopyhx.klass = rb_define_class_under(mCoopyhx, "Coopyhx", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Coopyhx, (void *) &SwigClassCoopyhx);
  rb_define_alloc_func(SwigClassCoopyhx.klass, _wrap_Coopyhx_allocate);
  rb_define_method(SwigClassCoopyhx.klass, "initialize", VALUEFUNC(_wrap_new_Coopyhx), -1);
  rb_define_singleton_method(SwigClassCoopyhx.klass, "boot", VALUEFUNC(_wrap_Coopyhx_boot), -1);
  SwigClassCoopyhx.mark = 0;
  SwigClassCoopyhx.destroy = (void (*)(void *)) free_Coopyhx;
  SwigClassCoopyhx.trackObjects = 0;
  
  SwigClassObjectPtrSimpleTable_obj.klass = rb_define_class_under(mCoopyhx, "ObjectPtrSimpleTable_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleTable_obj_t, (void *) &SwigClassObjectPtrSimpleTable_obj);
  rb_define_alloc_func(SwigClassObjectPtrSimpleTable_obj.klass, _wrap_ObjectPtrSimpleTable_obj_allocate);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrSimpleTable_obj), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___deref__), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_GetPtr), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__construct", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___construct), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__new", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___new), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___CreateEmpty), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__Create", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___Create), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__boot", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___boot), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__register", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___register), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__Mark", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___Mark), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__Visit", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___Visit), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "asDatum", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_asDatum), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "asBag", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_asBag), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "asTable", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_asTable), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__ToInterface", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___ToInterface), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "__ToString", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj___ToString), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "trimBlank", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_trimBlank), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "trimBlank_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_trimBlank_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "insertOrDeleteColumns", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteColumns), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "insertOrDeleteColumns_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteColumns_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "insertOrDeleteRows", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteRows), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "insertOrDeleteRows_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_insertOrDeleteRows_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "clear", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_clear), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "clear_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_clear_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "resize", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_resize), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "resize_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_resize_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "isResizable", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_isResizable), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "isResizable_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_isResizable_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getItemView", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getItemView), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getItemView_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getItemView_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getCellView", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getCellView), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getCellView_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getCellView_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "toString", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_toString), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "toString_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_toString_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getItem", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getItem), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getItem_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getItem_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "setCell", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_setCell), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "setCell_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_setCell_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getCell", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getCell), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getCell_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getCell_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "get_size", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_get_size), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "get_size_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_get_size_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "get_height", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_get_height), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "get_height_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_get_height_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "get_width", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_get_width), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "get_width_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_get_width_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getTable", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getTable), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "getTable_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_getTable_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "bag=", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_bag_set), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "bag", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_bag_get), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "h=", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_h_set), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "h", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_h_get), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "w=", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_w_set), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "w", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_w_get), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "data=", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_data_set), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "data", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_data_get), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "tableToString", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_tableToString), -1);
  rb_define_method(SwigClassObjectPtrSimpleTable_obj.klass, "tableToString_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleTable_obj_tableToString_dyn), -1);
  SwigClassObjectPtrSimpleTable_obj.mark = 0;
  SwigClassObjectPtrSimpleTable_obj.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_coopy_SimpleTable_obj_Sg_;
  SwigClassObjectPtrSimpleTable_obj.trackObjects = 0;
  
  SwigClassObjectPtrSimpleCell_obj.klass = rb_define_class_under(mCoopyhx, "ObjectPtrSimpleCell_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_coopy__SimpleCell_obj_t, (void *) &SwigClassObjectPtrSimpleCell_obj);
  rb_define_alloc_func(SwigClassObjectPtrSimpleCell_obj.klass, _wrap_ObjectPtrSimpleCell_obj_allocate);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrSimpleCell_obj), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___deref__), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj_GetPtr), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__construct", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___construct), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__new", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___new), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___CreateEmpty), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__Create", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___Create), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__boot", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___boot), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__register", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___register), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__Mark", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___Mark), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__Visit", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___Visit), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "asDatum", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj_asDatum), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__ToInterface", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___ToInterface), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "__ToString", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj___ToString), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "toString", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj_toString), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "toString_dyn", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj_toString_dyn), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "datum=", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj_datum_set), -1);
  rb_define_method(SwigClassObjectPtrSimpleCell_obj.klass, "datum", VALUEFUNC(_wrap_ObjectPtrSimpleCell_obj_datum_get), -1);
  SwigClassObjectPtrSimpleCell_obj.mark = 0;
  SwigClassObjectPtrSimpleCell_obj.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_coopy_SimpleCell_obj_Sg_;
  SwigClassObjectPtrSimpleCell_obj.trackObjects = 0;
  
  SwigClassObjectPtrDatum_obj.klass = rb_define_class_under(mCoopyhx, "ObjectPtrDatum_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_coopy__Datum_obj_t, (void *) &SwigClassObjectPtrDatum_obj);
  rb_define_alloc_func(SwigClassObjectPtrDatum_obj.klass, _wrap_ObjectPtrDatum_obj_allocate);
  rb_define_method(SwigClassObjectPtrDatum_obj.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrDatum_obj), -1);
  rb_define_method(SwigClassObjectPtrDatum_obj.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrDatum_obj___deref__), -1);
  rb_define_method(SwigClassObjectPtrDatum_obj.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrDatum_obj_GetPtr), -1);
  rb_define_method(SwigClassObjectPtrDatum_obj.klass, "__boot", VALUEFUNC(_wrap_ObjectPtrDatum_obj___boot), -1);
  rb_define_method(SwigClassObjectPtrDatum_obj.klass, "toString", VALUEFUNC(_wrap_ObjectPtrDatum_obj_toString), -1);
  rb_define_method(SwigClassObjectPtrDatum_obj.klass, "toString_dyn", VALUEFUNC(_wrap_ObjectPtrDatum_obj_toString_dyn), -1);
  SwigClassObjectPtrDatum_obj.mark = 0;
  SwigClassObjectPtrDatum_obj.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_coopy_Datum_obj_Sg_;
  SwigClassObjectPtrDatum_obj.trackObjects = 0;
  
  SwigClassObjectPtrCompareTable_obj.klass = rb_define_class_under(mCoopyhx, "ObjectPtrCompareTable_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_coopy__CompareTable_obj_t, (void *) &SwigClassObjectPtrCompareTable_obj);
  rb_define_alloc_func(SwigClassObjectPtrCompareTable_obj.klass, _wrap_ObjectPtrCompareTable_obj_allocate);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrCompareTable_obj), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___deref__), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_GetPtr), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__construct", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___construct), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__new", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___new), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___CreateEmpty), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__Create", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___Create), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__boot", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___boot), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__register", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___register), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__Mark", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___Mark), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__Visit", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___Visit), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "__ToString", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj___ToString), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "getIndexes", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_getIndexes), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "getIndexes_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_getIndexes_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "storeIndexes", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_storeIndexes), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "storeIndexes_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_storeIndexes_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "compareCore", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_compareCore), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "compareCore_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_compareCore_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "isEqual2", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_isEqual2), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "isEqual2_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_isEqual2_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "testIsEqual", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_testIsEqual), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "testIsEqual_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_testIsEqual_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "hasSameColumns2", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_hasSameColumns2), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "hasSameColumns2_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_hasSameColumns2_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "testHasSameColumns", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_testHasSameColumns), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "testHasSameColumns_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_testHasSameColumns_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "alignColumns", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_alignColumns), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "alignColumns_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_alignColumns_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "alignCore2", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_alignCore2), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "alignCore2_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_alignCore2_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "alignCore", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_alignCore), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "alignCore_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_alignCore_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "getComparisonState", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_getComparisonState), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "getComparisonState_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_getComparisonState_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "align", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_align), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "align_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_align_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "attach", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_attach), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "attach_dyn", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_attach_dyn), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "indexes=", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_indexes_set), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "indexes", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_indexes_get), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "comp=", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_comp_set), -1);
  rb_define_method(SwigClassObjectPtrCompareTable_obj.klass, "comp", VALUEFUNC(_wrap_ObjectPtrCompareTable_obj_comp_get), -1);
  SwigClassObjectPtrCompareTable_obj.mark = 0;
  SwigClassObjectPtrCompareTable_obj.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_coopy_CompareTable_obj_Sg_;
  SwigClassObjectPtrCompareTable_obj.trackObjects = 0;
  
  SwigClassObjectPtrAlignment_obj.klass = rb_define_class_under(mCoopyhx, "ObjectPtrAlignment_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_coopy__Alignment_obj_t, (void *) &SwigClassObjectPtrAlignment_obj);
  rb_define_alloc_func(SwigClassObjectPtrAlignment_obj.klass, _wrap_ObjectPtrAlignment_obj_allocate);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrAlignment_obj), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___deref__), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_GetPtr), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__construct", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___construct), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__new", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___new), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___CreateEmpty), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__Create", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___Create), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__boot", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___boot), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__register", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___register), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__Mark", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___Mark), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__Visit", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___Visit), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "__ToString", VALUEFUNC(_wrap_ObjectPtrAlignment_obj___ToString), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toOrder2", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toOrder2), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toOrder2_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toOrder2_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toOrder3", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toOrder3), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toOrder3_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toOrder3_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getTargetHeader", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getTargetHeader), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getTargetHeader_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getTargetHeader_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getSourceHeader", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getSourceHeader), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getSourceHeader_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getSourceHeader_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getTarget", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getTarget), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getTarget_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getTarget_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getSource", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getSource), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "getSource_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_getSource_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toOrder", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toOrder), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toOrder_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toOrder_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toString", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toString), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "toString_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_toString_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "count", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_count), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "count_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_count_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "b2a", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_b2a), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "b2a_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_b2a_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "a2b", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_a2b), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "a2b_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_a2b_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "link", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_link), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "link_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_link_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "setRowlike", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_setRowlike), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "setRowlike_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_setRowlike_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "headers", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_headers), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "headers_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_headers_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "tables", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_tables), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "tables_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_tables_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "range", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_range), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "range_dyn", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_range_dyn), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "meta=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_meta_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "meta", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_meta_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "reference=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_reference_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "reference", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_reference_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "order_cache_has_reference=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_order_cache_has_reference_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "order_cache_has_reference", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_order_cache_has_reference_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "order_cache=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_order_cache_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "order_cache", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_order_cache_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "map_count=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_map_count_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "map_count", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_map_count_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ib=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ib_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ib", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ib_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ia=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ia_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ia", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ia_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "tb=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_tb_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "tb", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_tb_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ta=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ta_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ta", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ta_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "hb=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_hb_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "hb", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_hb_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ha=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ha_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "ha", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_ha_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "map_b2a=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_map_b2a_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "map_b2a", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_map_b2a_get), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "map_a2b=", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_map_a2b_set), -1);
  rb_define_method(SwigClassObjectPtrAlignment_obj.klass, "map_a2b", VALUEFUNC(_wrap_ObjectPtrAlignment_obj_map_a2b_get), -1);
  SwigClassObjectPtrAlignment_obj.mark = 0;
  SwigClassObjectPtrAlignment_obj.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_coopy_Alignment_obj_Sg_;
  SwigClassObjectPtrAlignment_obj.trackObjects = 0;
  
  SwigClassObjectPtrTableDiff_obj.klass = rb_define_class_under(mCoopyhx, "ObjectPtrTableDiff_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_coopy__TableDiff_obj_t, (void *) &SwigClassObjectPtrTableDiff_obj);
  rb_define_alloc_func(SwigClassObjectPtrTableDiff_obj.klass, _wrap_ObjectPtrTableDiff_obj_allocate);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrTableDiff_obj), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___deref__), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_GetPtr), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__construct", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___construct), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__new", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___new), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___CreateEmpty), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__Create", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___Create), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__boot", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___boot), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__register", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___register), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__Mark", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___Mark), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__Visit", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___Visit), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "__ToString", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj___ToString), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "test", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_test), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "test_dyn", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_test_dyn), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "hilite", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_hilite), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "hilite_dyn", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_hilite_dyn), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "quoteForDiff", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_quoteForDiff), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "quoteForDiff_dyn", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_quoteForDiff_dyn), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "getSeparator", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_getSeparator), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "getSeparator_dyn", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_getSeparator_dyn), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "flags=", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_flags_set), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "flags", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_flags_get), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "align=", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_align_set), -1);
  rb_define_method(SwigClassObjectPtrTableDiff_obj.klass, "align", VALUEFUNC(_wrap_ObjectPtrTableDiff_obj_align_get), -1);
  SwigClassObjectPtrTableDiff_obj.mark = 0;
  SwigClassObjectPtrTableDiff_obj.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_coopy_TableDiff_obj_Sg_;
  SwigClassObjectPtrTableDiff_obj.trackObjects = 0;
  
  SwigClassObjectPtrObject.klass = rb_define_class_under(mCoopyhx, "ObjectPtrObject", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_hx__ObjectPtrT_hx__Object_t, (void *) &SwigClassObjectPtrObject);
  rb_define_alloc_func(SwigClassObjectPtrObject.klass, _wrap_ObjectPtrObject_allocate);
  rb_define_method(SwigClassObjectPtrObject.klass, "initialize", VALUEFUNC(_wrap_new_ObjectPtrObject), -1);
  rb_define_method(SwigClassObjectPtrObject.klass, "__deref__", VALUEFUNC(_wrap_ObjectPtrObject___deref__), -1);
  rb_define_method(SwigClassObjectPtrObject.klass, "GetPtr", VALUEFUNC(_wrap_ObjectPtrObject_GetPtr), -1);
  SwigClassObjectPtrObject.mark = 0;
  SwigClassObjectPtrObject.destroy = (void (*)(void *)) free_hx_ObjectPtr_Sl_hx_Object_Sg_;
  SwigClassObjectPtrObject.trackObjects = 0;
  
  SwigClassDynamic.klass = rb_define_class_under(mCoopyhx, "Dynamic", ((swig_class *) SWIGTYPE_p_hx__ObjectPtrT_hx__Object_t->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Dynamic, (void *) &SwigClassDynamic);
  rb_define_alloc_func(SwigClassDynamic.klass, _wrap_Dynamic_allocate);
  rb_define_method(SwigClassDynamic.klass, "initialize", VALUEFUNC(_wrap_new_Dynamic), -1);
  rb_define_method(SwigClassDynamic.klass, "Set", VALUEFUNC(_wrap_Dynamic_Set), -1);
  rb_define_method(SwigClassDynamic.klass, "__get", VALUEFUNC(_wrap_Dynamic___get), -1);
  rb_define_method(SwigClassDynamic.klass, "Default", VALUEFUNC(_wrap_Dynamic_Default), -1);
  rb_define_singleton_method(SwigClassDynamic.klass, "__boot", VALUEFUNC(_wrap_Dynamic___boot), -1);
  rb_define_method(SwigClassDynamic.klass, "IsNumeric", VALUEFUNC(_wrap_Dynamic_IsNumeric), -1);
  rb_define_method(SwigClassDynamic.klass, "Compare", VALUEFUNC(_wrap_Dynamic_Compare), -1);
  rb_define_method(SwigClassDynamic.klass, "==", VALUEFUNC(_wrap_Dynamic___eq__), -1);
  rb_define_method(SwigClassDynamic.klass, "<", VALUEFUNC(_wrap_Dynamic___lt__), -1);
  rb_define_method(SwigClassDynamic.klass, "<=", VALUEFUNC(_wrap_Dynamic___le__), -1);
  rb_define_method(SwigClassDynamic.klass, ">=", VALUEFUNC(_wrap_Dynamic___ge__), -1);
  rb_define_method(SwigClassDynamic.klass, ">", VALUEFUNC(_wrap_Dynamic___gt__), -1);
  rb_define_method(SwigClassDynamic.klass, "+", VALUEFUNC(_wrap_Dynamic___add__), -1);
  rb_define_method(SwigClassDynamic.klass, "%", VALUEFUNC(_wrap_Dynamic___mod__), -1);
  rb_define_method(SwigClassDynamic.klass, "-@", VALUEFUNC(_wrap_Dynamic___neg__), -1);
  rb_define_method(SwigClassDynamic.klass, "-", VALUEFUNC(_wrap_Dynamic___sub__), -1);
  rb_define_method(SwigClassDynamic.klass, "*", VALUEFUNC(_wrap_Dynamic___mul__), -1);
  rb_define_method(SwigClassDynamic.klass, "/", VALUEFUNC(_wrap_Dynamic___div__), -1);
  rb_define_singleton_method(SwigClassDynamic.klass, "ThrowBadFunctionError", VALUEFUNC(_wrap_Dynamic_ThrowBadFunctionError), -1);
  rb_define_method(SwigClassDynamic.klass, "CheckFPtr", VALUEFUNC(_wrap_Dynamic_CheckFPtr), -1);
  SwigClassDynamic.mark = 0;
  SwigClassDynamic.destroy = (void (*)(void *)) free_Dynamic;
  SwigClassDynamic.trackObjects = 0;
  rb_define_module_function(mCoopyhx, "CreateMemberFunction0", VALUEFUNC(_wrap_CreateMemberFunction0), -1);
  rb_define_module_function(mCoopyhx, "CreateMemberFunction1", VALUEFUNC(_wrap_CreateMemberFunction1), -1);
  rb_define_module_function(mCoopyhx, "CreateMemberFunction2", VALUEFUNC(_wrap_CreateMemberFunction2), -1);
  rb_define_module_function(mCoopyhx, "CreateMemberFunction3", VALUEFUNC(_wrap_CreateMemberFunction3), -1);
  rb_define_module_function(mCoopyhx, "CreateMemberFunction4", VALUEFUNC(_wrap_CreateMemberFunction4), -1);
  rb_define_module_function(mCoopyhx, "CreateMemberFunction5", VALUEFUNC(_wrap_CreateMemberFunction5), -1);
  rb_define_module_function(mCoopyhx, "CreateMemberFunctionVar", VALUEFUNC(_wrap_CreateMemberFunctionVar), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunction0", VALUEFUNC(_wrap_CreateStaticFunction0), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunction1", VALUEFUNC(_wrap_CreateStaticFunction1), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunction2", VALUEFUNC(_wrap_CreateStaticFunction2), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunction3", VALUEFUNC(_wrap_CreateStaticFunction3), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunction4", VALUEFUNC(_wrap_CreateStaticFunction4), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunction5", VALUEFUNC(_wrap_CreateStaticFunction5), -1);
  rb_define_module_function(mCoopyhx, "CreateStaticFunctionVar", VALUEFUNC(_wrap_CreateStaticFunctionVar), -1);
  rb_define_module_function(mCoopyhx, "GetIntClass", VALUEFUNC(_wrap_GetIntClass), -1);
  rb_define_module_function(mCoopyhx, "GetFloatClass", VALUEFUNC(_wrap_GetFloatClass), -1);
  rb_define_module_function(mCoopyhx, "GetBoolClass", VALUEFUNC(_wrap_GetBoolClass), -1);
  rb_define_module_function(mCoopyhx, "GetVoidClass", VALUEFUNC(_wrap_GetVoidClass), -1);
  rb_define_module_function(mCoopyhx, "GetStringClass", VALUEFUNC(_wrap_GetStringClass), -1);
  
  SwigClassDatum_obj.klass = rb_define_class_under(mCoopyhx, "Datum_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__Datum_obj, (void *) &SwigClassDatum_obj);
  rb_undef_alloc_func(SwigClassDatum_obj.klass);
  rb_define_singleton_method(SwigClassDatum_obj.klass, "__boot", VALUEFUNC(_wrap_Datum_obj___boot), -1);
  rb_define_method(SwigClassDatum_obj.klass, "toString", VALUEFUNC(_wrap_Datum_obj_toString), -1);
  rb_define_method(SwigClassDatum_obj.klass, "toString_dyn", VALUEFUNC(_wrap_Datum_obj_toString_dyn), -1);
  SwigClassDatum_obj.mark = 0;
  SwigClassDatum_obj.destroy = (void (*)(void *)) free_coopy_Datum_obj;
  SwigClassDatum_obj.trackObjects = 0;
  
  SwigClassBag_obj.klass = rb_define_class_under(mCoopyhx, "Bag_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__Bag_obj, (void *) &SwigClassBag_obj);
  rb_undef_alloc_func(SwigClassBag_obj.klass);
  rb_define_singleton_method(SwigClassBag_obj.klass, "__boot", VALUEFUNC(_wrap_Bag_obj___boot), -1);
  rb_define_method(SwigClassBag_obj.klass, "getItemView", VALUEFUNC(_wrap_Bag_obj_getItemView), -1);
  rb_define_method(SwigClassBag_obj.klass, "getItemView_dyn", VALUEFUNC(_wrap_Bag_obj_getItemView_dyn), -1);
  rb_define_method(SwigClassBag_obj.klass, "getItem", VALUEFUNC(_wrap_Bag_obj_getItem), -1);
  rb_define_method(SwigClassBag_obj.klass, "getItem_dyn", VALUEFUNC(_wrap_Bag_obj_getItem_dyn), -1);
  SwigClassBag_obj.mark = 0;
  SwigClassBag_obj.destroy = (void (*)(void *)) free_coopy_Bag_obj;
  SwigClassBag_obj.trackObjects = 0;
  
  SwigClassView_obj.klass = rb_define_class_under(mCoopyhx, "View_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__View_obj, (void *) &SwigClassView_obj);
  rb_undef_alloc_func(SwigClassView_obj.klass);
  rb_define_singleton_method(SwigClassView_obj.klass, "__boot", VALUEFUNC(_wrap_View_obj___boot), -1);
  rb_define_method(SwigClassView_obj.klass, "toDatum", VALUEFUNC(_wrap_View_obj_toDatum), -1);
  rb_define_method(SwigClassView_obj.klass, "toDatum_dyn", VALUEFUNC(_wrap_View_obj_toDatum_dyn), -1);
  rb_define_method(SwigClassView_obj.klass, "equals", VALUEFUNC(_wrap_View_obj_equals), -1);
  rb_define_method(SwigClassView_obj.klass, "equals_dyn", VALUEFUNC(_wrap_View_obj_equals_dyn), -1);
  rb_define_method(SwigClassView_obj.klass, "hasStructure", VALUEFUNC(_wrap_View_obj_hasStructure), -1);
  rb_define_method(SwigClassView_obj.klass, "hasStructure_dyn", VALUEFUNC(_wrap_View_obj_hasStructure_dyn), -1);
  rb_define_method(SwigClassView_obj.klass, "getTable", VALUEFUNC(_wrap_View_obj_getTable), -1);
  rb_define_method(SwigClassView_obj.klass, "getTable_dyn", VALUEFUNC(_wrap_View_obj_getTable_dyn), -1);
  rb_define_method(SwigClassView_obj.klass, "getBag", VALUEFUNC(_wrap_View_obj_getBag), -1);
  rb_define_method(SwigClassView_obj.klass, "getBag_dyn", VALUEFUNC(_wrap_View_obj_getBag_dyn), -1);
  rb_define_method(SwigClassView_obj.klass, "toString", VALUEFUNC(_wrap_View_obj_toString), -1);
  rb_define_method(SwigClassView_obj.klass, "toString_dyn", VALUEFUNC(_wrap_View_obj_toString_dyn), -1);
  SwigClassView_obj.mark = 0;
  SwigClassView_obj.destroy = (void (*)(void *)) free_coopy_View_obj;
  SwigClassView_obj.trackObjects = 0;
  
  SwigClassSimpleCell_obj.klass = rb_define_class_under(mCoopyhx, "SimpleCell_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__SimpleCell_obj, (void *) &SwigClassSimpleCell_obj);
  rb_define_alloc_func(SwigClassSimpleCell_obj.klass, _wrap_SimpleCell_obj_allocate);
  rb_define_method(SwigClassSimpleCell_obj.klass, "initialize", VALUEFUNC(_wrap_new_SimpleCell_obj), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "__construct", VALUEFUNC(_wrap_SimpleCell_obj___construct), -1);
  rb_define_singleton_method(SwigClassSimpleCell_obj.klass, "__new", VALUEFUNC(_wrap_SimpleCell_obj___new), -1);
  rb_define_singleton_method(SwigClassSimpleCell_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_SimpleCell_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassSimpleCell_obj.klass, "__Create", VALUEFUNC(_wrap_SimpleCell_obj___Create), -1);
  rb_define_singleton_method(SwigClassSimpleCell_obj.klass, "__boot", VALUEFUNC(_wrap_SimpleCell_obj___boot), -1);
  rb_define_singleton_method(SwigClassSimpleCell_obj.klass, "__register", VALUEFUNC(_wrap_SimpleCell_obj___register), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "__Mark", VALUEFUNC(_wrap_SimpleCell_obj___Mark), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "__Visit", VALUEFUNC(_wrap_SimpleCell_obj___Visit), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "asDatum", VALUEFUNC(_wrap_SimpleCell_obj_asDatum), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "__ToInterface", VALUEFUNC(_wrap_SimpleCell_obj___ToInterface), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "__ToString", VALUEFUNC(_wrap_SimpleCell_obj___ToString), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "toString", VALUEFUNC(_wrap_SimpleCell_obj_toString), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "toString_dyn", VALUEFUNC(_wrap_SimpleCell_obj_toString_dyn), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "datum=", VALUEFUNC(_wrap_SimpleCell_obj_datum_set), -1);
  rb_define_method(SwigClassSimpleCell_obj.klass, "datum", VALUEFUNC(_wrap_SimpleCell_obj_datum_get), -1);
  SwigClassSimpleCell_obj.mark = 0;
  SwigClassSimpleCell_obj.destroy = (void (*)(void *)) free_coopy_SimpleCell_obj;
  SwigClassSimpleCell_obj.trackObjects = 0;
  
  SwigClassSimpleTable_obj.klass = rb_define_class_under(mCoopyhx, "SimpleTable_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__SimpleTable_obj, (void *) &SwigClassSimpleTable_obj);
  rb_define_alloc_func(SwigClassSimpleTable_obj.klass, _wrap_SimpleTable_obj_allocate);
  rb_define_method(SwigClassSimpleTable_obj.klass, "initialize", VALUEFUNC(_wrap_new_SimpleTable_obj), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "__construct", VALUEFUNC(_wrap_SimpleTable_obj___construct), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "__new", VALUEFUNC(_wrap_SimpleTable_obj___new), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_SimpleTable_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "__Create", VALUEFUNC(_wrap_SimpleTable_obj___Create), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "__boot", VALUEFUNC(_wrap_SimpleTable_obj___boot), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "__register", VALUEFUNC(_wrap_SimpleTable_obj___register), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "__Mark", VALUEFUNC(_wrap_SimpleTable_obj___Mark), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "__Visit", VALUEFUNC(_wrap_SimpleTable_obj___Visit), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "asDatum", VALUEFUNC(_wrap_SimpleTable_obj_asDatum), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "asBag", VALUEFUNC(_wrap_SimpleTable_obj_asBag), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "asTable", VALUEFUNC(_wrap_SimpleTable_obj_asTable), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "__ToInterface", VALUEFUNC(_wrap_SimpleTable_obj___ToInterface), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "__ToString", VALUEFUNC(_wrap_SimpleTable_obj___ToString), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "trimBlank", VALUEFUNC(_wrap_SimpleTable_obj_trimBlank), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "trimBlank_dyn", VALUEFUNC(_wrap_SimpleTable_obj_trimBlank_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "insertOrDeleteColumns", VALUEFUNC(_wrap_SimpleTable_obj_insertOrDeleteColumns), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "insertOrDeleteColumns_dyn", VALUEFUNC(_wrap_SimpleTable_obj_insertOrDeleteColumns_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "insertOrDeleteRows", VALUEFUNC(_wrap_SimpleTable_obj_insertOrDeleteRows), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "insertOrDeleteRows_dyn", VALUEFUNC(_wrap_SimpleTable_obj_insertOrDeleteRows_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "clear", VALUEFUNC(_wrap_SimpleTable_obj_clear), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "clear_dyn", VALUEFUNC(_wrap_SimpleTable_obj_clear_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "resize", VALUEFUNC(_wrap_SimpleTable_obj_resize), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "resize_dyn", VALUEFUNC(_wrap_SimpleTable_obj_resize_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "isResizable", VALUEFUNC(_wrap_SimpleTable_obj_isResizable), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "isResizable_dyn", VALUEFUNC(_wrap_SimpleTable_obj_isResizable_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getItemView", VALUEFUNC(_wrap_SimpleTable_obj_getItemView), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getItemView_dyn", VALUEFUNC(_wrap_SimpleTable_obj_getItemView_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getCellView", VALUEFUNC(_wrap_SimpleTable_obj_getCellView), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getCellView_dyn", VALUEFUNC(_wrap_SimpleTable_obj_getCellView_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "toString", VALUEFUNC(_wrap_SimpleTable_obj_toString), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "toString_dyn", VALUEFUNC(_wrap_SimpleTable_obj_toString_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getItem", VALUEFUNC(_wrap_SimpleTable_obj_getItem), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getItem_dyn", VALUEFUNC(_wrap_SimpleTable_obj_getItem_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "setCell", VALUEFUNC(_wrap_SimpleTable_obj_setCell), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "setCell_dyn", VALUEFUNC(_wrap_SimpleTable_obj_setCell_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getCell", VALUEFUNC(_wrap_SimpleTable_obj_getCell), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getCell_dyn", VALUEFUNC(_wrap_SimpleTable_obj_getCell_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "get_size", VALUEFUNC(_wrap_SimpleTable_obj_get_size), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "get_size_dyn", VALUEFUNC(_wrap_SimpleTable_obj_get_size_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "get_height", VALUEFUNC(_wrap_SimpleTable_obj_get_height), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "get_height_dyn", VALUEFUNC(_wrap_SimpleTable_obj_get_height_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "get_width", VALUEFUNC(_wrap_SimpleTable_obj_get_width), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "get_width_dyn", VALUEFUNC(_wrap_SimpleTable_obj_get_width_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getTable", VALUEFUNC(_wrap_SimpleTable_obj_getTable), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "getTable_dyn", VALUEFUNC(_wrap_SimpleTable_obj_getTable_dyn), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "bag=", VALUEFUNC(_wrap_SimpleTable_obj_bag_set), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "bag", VALUEFUNC(_wrap_SimpleTable_obj_bag_get), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "h=", VALUEFUNC(_wrap_SimpleTable_obj_h_set), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "h", VALUEFUNC(_wrap_SimpleTable_obj_h_get), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "w=", VALUEFUNC(_wrap_SimpleTable_obj_w_set), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "w", VALUEFUNC(_wrap_SimpleTable_obj_w_get), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "data=", VALUEFUNC(_wrap_SimpleTable_obj_data_set), -1);
  rb_define_method(SwigClassSimpleTable_obj.klass, "data", VALUEFUNC(_wrap_SimpleTable_obj_data_get), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "tableToString", VALUEFUNC(_wrap_SimpleTable_obj_tableToString), -1);
  rb_define_singleton_method(SwigClassSimpleTable_obj.klass, "tableToString_dyn", VALUEFUNC(_wrap_SimpleTable_obj_tableToString_dyn), -1);
  SwigClassSimpleTable_obj.mark = 0;
  SwigClassSimpleTable_obj.destroy = (void (*)(void *)) free_coopy_SimpleTable_obj;
  SwigClassSimpleTable_obj.trackObjects = 0;
  
  SwigClassCoopy_obj.klass = rb_define_class_under(mCoopyhx, "Coopy_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__Coopy_obj, (void *) &SwigClassCoopy_obj);
  rb_define_alloc_func(SwigClassCoopy_obj.klass, _wrap_Coopy_obj_allocate);
  rb_define_method(SwigClassCoopy_obj.klass, "initialize", VALUEFUNC(_wrap_new_Coopy_obj), -1);
  rb_define_method(SwigClassCoopy_obj.klass, "__construct", VALUEFUNC(_wrap_Coopy_obj___construct), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "__new", VALUEFUNC(_wrap_Coopy_obj___new), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_Coopy_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "__Create", VALUEFUNC(_wrap_Coopy_obj___Create), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "__boot", VALUEFUNC(_wrap_Coopy_obj___boot), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "__register", VALUEFUNC(_wrap_Coopy_obj___register), -1);
  rb_define_method(SwigClassCoopy_obj.klass, "__Mark", VALUEFUNC(_wrap_Coopy_obj___Mark), -1);
  rb_define_method(SwigClassCoopy_obj.klass, "__Visit", VALUEFUNC(_wrap_Coopy_obj___Visit), -1);
  rb_define_method(SwigClassCoopy_obj.klass, "__ToString", VALUEFUNC(_wrap_Coopy_obj___ToString), -1);
  rb_define_method(SwigClassCoopy_obj.klass, "format_preference=", VALUEFUNC(_wrap_Coopy_obj_format_preference_set), -1);
  rb_define_method(SwigClassCoopy_obj.klass, "format_preference", VALUEFUNC(_wrap_Coopy_obj_format_preference_get), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "compareTables", VALUEFUNC(_wrap_Coopy_obj_compareTables), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "compareTables_dyn", VALUEFUNC(_wrap_Coopy_obj_compareTables_dyn), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "compareTables3", VALUEFUNC(_wrap_Coopy_obj_compareTables3), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "compareTables3_dyn", VALUEFUNC(_wrap_Coopy_obj_compareTables3_dyn), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "randomTests", VALUEFUNC(_wrap_Coopy_obj_randomTests), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "randomTests_dyn", VALUEFUNC(_wrap_Coopy_obj_randomTests_dyn), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "main", VALUEFUNC(_wrap_Coopy_obj_main), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "main_dyn", VALUEFUNC(_wrap_Coopy_obj_main_dyn), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "show", VALUEFUNC(_wrap_Coopy_obj_show), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "show_dyn", VALUEFUNC(_wrap_Coopy_obj_show_dyn), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "jsonify", VALUEFUNC(_wrap_Coopy_obj_jsonify), -1);
  rb_define_singleton_method(SwigClassCoopy_obj.klass, "jsonify_dyn", VALUEFUNC(_wrap_Coopy_obj_jsonify_dyn), -1);
  SwigClassCoopy_obj.mark = 0;
  SwigClassCoopy_obj.destroy = (void (*)(void *)) free_coopy_Coopy_obj;
  SwigClassCoopy_obj.trackObjects = 0;
  
  SwigClassCompareFlags_obj.klass = rb_define_class_under(mCoopyhx, "CompareFlags_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__CompareFlags_obj, (void *) &SwigClassCompareFlags_obj);
  rb_define_alloc_func(SwigClassCompareFlags_obj.klass, _wrap_CompareFlags_obj_allocate);
  rb_define_method(SwigClassCompareFlags_obj.klass, "initialize", VALUEFUNC(_wrap_new_CompareFlags_obj), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "__construct", VALUEFUNC(_wrap_CompareFlags_obj___construct), -1);
  rb_define_singleton_method(SwigClassCompareFlags_obj.klass, "__new", VALUEFUNC(_wrap_CompareFlags_obj___new), -1);
  rb_define_singleton_method(SwigClassCompareFlags_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_CompareFlags_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassCompareFlags_obj.klass, "__Create", VALUEFUNC(_wrap_CompareFlags_obj___Create), -1);
  rb_define_singleton_method(SwigClassCompareFlags_obj.klass, "__boot", VALUEFUNC(_wrap_CompareFlags_obj___boot), -1);
  rb_define_singleton_method(SwigClassCompareFlags_obj.klass, "__register", VALUEFUNC(_wrap_CompareFlags_obj___register), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "__Mark", VALUEFUNC(_wrap_CompareFlags_obj___Mark), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "__Visit", VALUEFUNC(_wrap_CompareFlags_obj___Visit), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "__ToString", VALUEFUNC(_wrap_CompareFlags_obj___ToString), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "unchanged_context=", VALUEFUNC(_wrap_CompareFlags_obj_unchanged_context_set), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "unchanged_context", VALUEFUNC(_wrap_CompareFlags_obj_unchanged_context_get), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "show_unchanged=", VALUEFUNC(_wrap_CompareFlags_obj_show_unchanged_set), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "show_unchanged", VALUEFUNC(_wrap_CompareFlags_obj_show_unchanged_get), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "always_show_header=", VALUEFUNC(_wrap_CompareFlags_obj_always_show_header_set), -1);
  rb_define_method(SwigClassCompareFlags_obj.klass, "always_show_header", VALUEFUNC(_wrap_CompareFlags_obj_always_show_header_get), -1);
  SwigClassCompareFlags_obj.mark = 0;
  SwigClassCompareFlags_obj.destroy = (void (*)(void *)) free_coopy_CompareFlags_obj;
  SwigClassCompareFlags_obj.trackObjects = 0;
  
  SwigClassCompareTable_obj.klass = rb_define_class_under(mCoopyhx, "CompareTable_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__CompareTable_obj, (void *) &SwigClassCompareTable_obj);
  rb_define_alloc_func(SwigClassCompareTable_obj.klass, _wrap_CompareTable_obj_allocate);
  rb_define_method(SwigClassCompareTable_obj.klass, "initialize", VALUEFUNC(_wrap_new_CompareTable_obj), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "__construct", VALUEFUNC(_wrap_CompareTable_obj___construct), -1);
  rb_define_singleton_method(SwigClassCompareTable_obj.klass, "__new", VALUEFUNC(_wrap_CompareTable_obj___new), -1);
  rb_define_singleton_method(SwigClassCompareTable_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_CompareTable_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassCompareTable_obj.klass, "__Create", VALUEFUNC(_wrap_CompareTable_obj___Create), -1);
  rb_define_singleton_method(SwigClassCompareTable_obj.klass, "__boot", VALUEFUNC(_wrap_CompareTable_obj___boot), -1);
  rb_define_singleton_method(SwigClassCompareTable_obj.klass, "__register", VALUEFUNC(_wrap_CompareTable_obj___register), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "__Mark", VALUEFUNC(_wrap_CompareTable_obj___Mark), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "__Visit", VALUEFUNC(_wrap_CompareTable_obj___Visit), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "__ToString", VALUEFUNC(_wrap_CompareTable_obj___ToString), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "getIndexes", VALUEFUNC(_wrap_CompareTable_obj_getIndexes), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "getIndexes_dyn", VALUEFUNC(_wrap_CompareTable_obj_getIndexes_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "storeIndexes", VALUEFUNC(_wrap_CompareTable_obj_storeIndexes), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "storeIndexes_dyn", VALUEFUNC(_wrap_CompareTable_obj_storeIndexes_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "compareCore", VALUEFUNC(_wrap_CompareTable_obj_compareCore), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "compareCore_dyn", VALUEFUNC(_wrap_CompareTable_obj_compareCore_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "isEqual2", VALUEFUNC(_wrap_CompareTable_obj_isEqual2), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "isEqual2_dyn", VALUEFUNC(_wrap_CompareTable_obj_isEqual2_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "testIsEqual", VALUEFUNC(_wrap_CompareTable_obj_testIsEqual), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "testIsEqual_dyn", VALUEFUNC(_wrap_CompareTable_obj_testIsEqual_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "hasSameColumns2", VALUEFUNC(_wrap_CompareTable_obj_hasSameColumns2), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "hasSameColumns2_dyn", VALUEFUNC(_wrap_CompareTable_obj_hasSameColumns2_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "testHasSameColumns", VALUEFUNC(_wrap_CompareTable_obj_testHasSameColumns), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "testHasSameColumns_dyn", VALUEFUNC(_wrap_CompareTable_obj_testHasSameColumns_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "alignColumns", VALUEFUNC(_wrap_CompareTable_obj_alignColumns), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "alignColumns_dyn", VALUEFUNC(_wrap_CompareTable_obj_alignColumns_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "alignCore2", VALUEFUNC(_wrap_CompareTable_obj_alignCore2), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "alignCore2_dyn", VALUEFUNC(_wrap_CompareTable_obj_alignCore2_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "alignCore", VALUEFUNC(_wrap_CompareTable_obj_alignCore), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "alignCore_dyn", VALUEFUNC(_wrap_CompareTable_obj_alignCore_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "getComparisonState", VALUEFUNC(_wrap_CompareTable_obj_getComparisonState), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "getComparisonState_dyn", VALUEFUNC(_wrap_CompareTable_obj_getComparisonState_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "align", VALUEFUNC(_wrap_CompareTable_obj_align), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "align_dyn", VALUEFUNC(_wrap_CompareTable_obj_align_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "attach", VALUEFUNC(_wrap_CompareTable_obj_attach), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "attach_dyn", VALUEFUNC(_wrap_CompareTable_obj_attach_dyn), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "indexes=", VALUEFUNC(_wrap_CompareTable_obj_indexes_set), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "indexes", VALUEFUNC(_wrap_CompareTable_obj_indexes_get), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "comp=", VALUEFUNC(_wrap_CompareTable_obj_comp_set), -1);
  rb_define_method(SwigClassCompareTable_obj.klass, "comp", VALUEFUNC(_wrap_CompareTable_obj_comp_get), -1);
  SwigClassCompareTable_obj.mark = 0;
  SwigClassCompareTable_obj.destroy = (void (*)(void *)) free_coopy_CompareTable_obj;
  SwigClassCompareTable_obj.trackObjects = 0;
  
  SwigClassTableDiff_obj.klass = rb_define_class_under(mCoopyhx, "TableDiff_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__TableDiff_obj, (void *) &SwigClassTableDiff_obj);
  rb_define_alloc_func(SwigClassTableDiff_obj.klass, _wrap_TableDiff_obj_allocate);
  rb_define_method(SwigClassTableDiff_obj.klass, "initialize", VALUEFUNC(_wrap_new_TableDiff_obj), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "__construct", VALUEFUNC(_wrap_TableDiff_obj___construct), -1);
  rb_define_singleton_method(SwigClassTableDiff_obj.klass, "__new", VALUEFUNC(_wrap_TableDiff_obj___new), -1);
  rb_define_singleton_method(SwigClassTableDiff_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_TableDiff_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassTableDiff_obj.klass, "__Create", VALUEFUNC(_wrap_TableDiff_obj___Create), -1);
  rb_define_singleton_method(SwigClassTableDiff_obj.klass, "__boot", VALUEFUNC(_wrap_TableDiff_obj___boot), -1);
  rb_define_singleton_method(SwigClassTableDiff_obj.klass, "__register", VALUEFUNC(_wrap_TableDiff_obj___register), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "__Mark", VALUEFUNC(_wrap_TableDiff_obj___Mark), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "__Visit", VALUEFUNC(_wrap_TableDiff_obj___Visit), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "__ToString", VALUEFUNC(_wrap_TableDiff_obj___ToString), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "test", VALUEFUNC(_wrap_TableDiff_obj_test), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "test_dyn", VALUEFUNC(_wrap_TableDiff_obj_test_dyn), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "hilite", VALUEFUNC(_wrap_TableDiff_obj_hilite), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "hilite_dyn", VALUEFUNC(_wrap_TableDiff_obj_hilite_dyn), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "quoteForDiff", VALUEFUNC(_wrap_TableDiff_obj_quoteForDiff), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "quoteForDiff_dyn", VALUEFUNC(_wrap_TableDiff_obj_quoteForDiff_dyn), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "getSeparator", VALUEFUNC(_wrap_TableDiff_obj_getSeparator), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "getSeparator_dyn", VALUEFUNC(_wrap_TableDiff_obj_getSeparator_dyn), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "flags=", VALUEFUNC(_wrap_TableDiff_obj_flags_set), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "flags", VALUEFUNC(_wrap_TableDiff_obj_flags_get), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "align=", VALUEFUNC(_wrap_TableDiff_obj_align_set), -1);
  rb_define_method(SwigClassTableDiff_obj.klass, "align", VALUEFUNC(_wrap_TableDiff_obj_align_get), -1);
  SwigClassTableDiff_obj.mark = 0;
  SwigClassTableDiff_obj.destroy = (void (*)(void *)) free_coopy_TableDiff_obj;
  SwigClassTableDiff_obj.trackObjects = 0;
  
  SwigClassAlignment_obj.klass = rb_define_class_under(mCoopyhx, "Alignment_obj", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_coopy__Alignment_obj, (void *) &SwigClassAlignment_obj);
  rb_define_alloc_func(SwigClassAlignment_obj.klass, _wrap_Alignment_obj_allocate);
  rb_define_method(SwigClassAlignment_obj.klass, "initialize", VALUEFUNC(_wrap_new_Alignment_obj), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "__construct", VALUEFUNC(_wrap_Alignment_obj___construct), -1);
  rb_define_singleton_method(SwigClassAlignment_obj.klass, "__new", VALUEFUNC(_wrap_Alignment_obj___new), -1);
  rb_define_singleton_method(SwigClassAlignment_obj.klass, "__CreateEmpty", VALUEFUNC(_wrap_Alignment_obj___CreateEmpty), -1);
  rb_define_singleton_method(SwigClassAlignment_obj.klass, "__Create", VALUEFUNC(_wrap_Alignment_obj___Create), -1);
  rb_define_singleton_method(SwigClassAlignment_obj.klass, "__boot", VALUEFUNC(_wrap_Alignment_obj___boot), -1);
  rb_define_singleton_method(SwigClassAlignment_obj.klass, "__register", VALUEFUNC(_wrap_Alignment_obj___register), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "__Mark", VALUEFUNC(_wrap_Alignment_obj___Mark), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "__Visit", VALUEFUNC(_wrap_Alignment_obj___Visit), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "__ToString", VALUEFUNC(_wrap_Alignment_obj___ToString), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toOrder2", VALUEFUNC(_wrap_Alignment_obj_toOrder2), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toOrder2_dyn", VALUEFUNC(_wrap_Alignment_obj_toOrder2_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toOrder3", VALUEFUNC(_wrap_Alignment_obj_toOrder3), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toOrder3_dyn", VALUEFUNC(_wrap_Alignment_obj_toOrder3_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getTargetHeader", VALUEFUNC(_wrap_Alignment_obj_getTargetHeader), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getTargetHeader_dyn", VALUEFUNC(_wrap_Alignment_obj_getTargetHeader_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getSourceHeader", VALUEFUNC(_wrap_Alignment_obj_getSourceHeader), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getSourceHeader_dyn", VALUEFUNC(_wrap_Alignment_obj_getSourceHeader_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getTarget", VALUEFUNC(_wrap_Alignment_obj_getTarget), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getTarget_dyn", VALUEFUNC(_wrap_Alignment_obj_getTarget_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getSource", VALUEFUNC(_wrap_Alignment_obj_getSource), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "getSource_dyn", VALUEFUNC(_wrap_Alignment_obj_getSource_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toOrder", VALUEFUNC(_wrap_Alignment_obj_toOrder), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toOrder_dyn", VALUEFUNC(_wrap_Alignment_obj_toOrder_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toString", VALUEFUNC(_wrap_Alignment_obj_toString), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "toString_dyn", VALUEFUNC(_wrap_Alignment_obj_toString_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "count", VALUEFUNC(_wrap_Alignment_obj_count), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "count_dyn", VALUEFUNC(_wrap_Alignment_obj_count_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "b2a", VALUEFUNC(_wrap_Alignment_obj_b2a), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "b2a_dyn", VALUEFUNC(_wrap_Alignment_obj_b2a_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "a2b", VALUEFUNC(_wrap_Alignment_obj_a2b), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "a2b_dyn", VALUEFUNC(_wrap_Alignment_obj_a2b_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "link", VALUEFUNC(_wrap_Alignment_obj_link), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "link_dyn", VALUEFUNC(_wrap_Alignment_obj_link_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "setRowlike", VALUEFUNC(_wrap_Alignment_obj_setRowlike), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "setRowlike_dyn", VALUEFUNC(_wrap_Alignment_obj_setRowlike_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "headers", VALUEFUNC(_wrap_Alignment_obj_headers), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "headers_dyn", VALUEFUNC(_wrap_Alignment_obj_headers_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "tables", VALUEFUNC(_wrap_Alignment_obj_tables), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "tables_dyn", VALUEFUNC(_wrap_Alignment_obj_tables_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "range", VALUEFUNC(_wrap_Alignment_obj_range), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "range_dyn", VALUEFUNC(_wrap_Alignment_obj_range_dyn), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "meta=", VALUEFUNC(_wrap_Alignment_obj_meta_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "meta", VALUEFUNC(_wrap_Alignment_obj_meta_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "reference=", VALUEFUNC(_wrap_Alignment_obj_reference_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "reference", VALUEFUNC(_wrap_Alignment_obj_reference_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "order_cache_has_reference=", VALUEFUNC(_wrap_Alignment_obj_order_cache_has_reference_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "order_cache_has_reference", VALUEFUNC(_wrap_Alignment_obj_order_cache_has_reference_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "order_cache=", VALUEFUNC(_wrap_Alignment_obj_order_cache_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "order_cache", VALUEFUNC(_wrap_Alignment_obj_order_cache_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "map_count=", VALUEFUNC(_wrap_Alignment_obj_map_count_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "map_count", VALUEFUNC(_wrap_Alignment_obj_map_count_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ib=", VALUEFUNC(_wrap_Alignment_obj_ib_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ib", VALUEFUNC(_wrap_Alignment_obj_ib_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ia=", VALUEFUNC(_wrap_Alignment_obj_ia_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ia", VALUEFUNC(_wrap_Alignment_obj_ia_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "tb=", VALUEFUNC(_wrap_Alignment_obj_tb_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "tb", VALUEFUNC(_wrap_Alignment_obj_tb_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ta=", VALUEFUNC(_wrap_Alignment_obj_ta_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ta", VALUEFUNC(_wrap_Alignment_obj_ta_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "hb=", VALUEFUNC(_wrap_Alignment_obj_hb_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "hb", VALUEFUNC(_wrap_Alignment_obj_hb_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ha=", VALUEFUNC(_wrap_Alignment_obj_ha_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "ha", VALUEFUNC(_wrap_Alignment_obj_ha_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "map_b2a=", VALUEFUNC(_wrap_Alignment_obj_map_b2a_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "map_b2a", VALUEFUNC(_wrap_Alignment_obj_map_b2a_get), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "map_a2b=", VALUEFUNC(_wrap_Alignment_obj_map_a2b_set), -1);
  rb_define_method(SwigClassAlignment_obj.klass, "map_a2b", VALUEFUNC(_wrap_Alignment_obj_map_a2b_get), -1);
  SwigClassAlignment_obj.mark = 0;
  SwigClassAlignment_obj.destroy = (void (*)(void *)) free_coopy_Alignment_obj;
  SwigClassAlignment_obj.trackObjects = 0;
  
  SwigClassString.klass = rb_define_class_under(mCoopyhx, "String", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_String, (void *) &SwigClassString);
  rb_define_alloc_func(SwigClassString.klass, _wrap_String_allocate);
  rb_define_method(SwigClassString.klass, "initialize", VALUEFUNC(_wrap_new_String), -1);
  rb_define_singleton_method(SwigClassString.klass, "__boot", VALUEFUNC(_wrap_String___boot), -1);
  rb_define_method(SwigClassString.klass, "__ToObject", VALUEFUNC(_wrap_String___ToObject), -1);
  rb_define_method(SwigClassString.klass, "Default", VALUEFUNC(_wrap_String_Default), -1);
  rb_define_method(SwigClassString.klass, "toString", VALUEFUNC(_wrap_String_toString), -1);
  rb_define_method(SwigClassString.klass, "__URLEncode", VALUEFUNC(_wrap_String___URLEncode), -1);
  rb_define_method(SwigClassString.klass, "__URLDecode", VALUEFUNC(_wrap_String___URLDecode), -1);
  rb_define_method(SwigClassString.klass, "dup", VALUEFUNC(_wrap_String_dup), -1);
  rb_define_method(SwigClassString.klass, "toUpperCase", VALUEFUNC(_wrap_String_toUpperCase), -1);
  rb_define_method(SwigClassString.klass, "toLowerCase", VALUEFUNC(_wrap_String_toLowerCase), -1);
  rb_define_method(SwigClassString.klass, "charAt", VALUEFUNC(_wrap_String_charAt), -1);
  rb_define_method(SwigClassString.klass, "charCodeAt", VALUEFUNC(_wrap_String_charCodeAt), -1);
  rb_define_method(SwigClassString.klass, "indexOf", VALUEFUNC(_wrap_String_indexOf), -1);
  rb_define_method(SwigClassString.klass, "lastIndexOf", VALUEFUNC(_wrap_String_lastIndexOf), -1);
  rb_define_method(SwigClassString.klass, "split", VALUEFUNC(_wrap_String_split), -1);
  rb_define_method(SwigClassString.klass, "substr", VALUEFUNC(_wrap_String_substr), -1);
  rb_define_method(SwigClassString.klass, "substring", VALUEFUNC(_wrap_String_substring), -1);
  rb_define_method(SwigClassString.klass, "c_str", VALUEFUNC(_wrap_String_c_str), -1);
  rb_define_method(SwigClassString.klass, "__CStr", VALUEFUNC(_wrap_String___CStr), -1);
  rb_define_method(SwigClassString.klass, "__WCStr", VALUEFUNC(_wrap_String___WCStr), -1);
  rb_define_singleton_method(SwigClassString.klass, "fromCharCode", VALUEFUNC(_wrap_String_fromCharCode), -1);
  rb_define_method(SwigClassString.klass, "getChar", VALUEFUNC(_wrap_String_getChar), -1);
  rb_define_method(SwigClassString.klass, "compare", VALUEFUNC(_wrap_String_compare), -1);
  rb_define_method(SwigClassString.klass, "+", VALUEFUNC(_wrap_String___add__), -1);
  rb_define_method(SwigClassString.klass, "==", VALUEFUNC(_wrap_String___eq__), -1);
  rb_define_method(SwigClassString.klass, "<", VALUEFUNC(_wrap_String___lt__), -1);
  rb_define_method(SwigClassString.klass, "<=", VALUEFUNC(_wrap_String___le__), -1);
  rb_define_method(SwigClassString.klass, ">", VALUEFUNC(_wrap_String___gt__), -1);
  rb_define_method(SwigClassString.klass, ">=", VALUEFUNC(_wrap_String___ge__), -1);
  rb_define_method(SwigClassString.klass, "cca", VALUEFUNC(_wrap_String_cca), -1);
  rb_define_singleton_method(SwigClassString.klass, "fromCharCode_dyn", VALUEFUNC(_wrap_String_fromCharCode_dyn), -1);
  rb_define_method(SwigClassString.klass, "charAt_dyn", VALUEFUNC(_wrap_String_charAt_dyn), -1);
  rb_define_method(SwigClassString.klass, "charCodeAt_dyn", VALUEFUNC(_wrap_String_charCodeAt_dyn), -1);
  rb_define_method(SwigClassString.klass, "indexOf_dyn", VALUEFUNC(_wrap_String_indexOf_dyn), -1);
  rb_define_method(SwigClassString.klass, "lastIndexOf_dyn", VALUEFUNC(_wrap_String_lastIndexOf_dyn), -1);
  rb_define_method(SwigClassString.klass, "split_dyn", VALUEFUNC(_wrap_String_split_dyn), -1);
  rb_define_method(SwigClassString.klass, "substr_dyn", VALUEFUNC(_wrap_String_substr_dyn), -1);
  rb_define_method(SwigClassString.klass, "toLowerCase_dyn", VALUEFUNC(_wrap_String_toLowerCase_dyn), -1);
  rb_define_method(SwigClassString.klass, "todyn", VALUEFUNC(_wrap_String_toString_dyn), -1);
  rb_define_method(SwigClassString.klass, "toUpperCase_dyn", VALUEFUNC(_wrap_String_toUpperCase_dyn), -1);
  rb_define_method(SwigClassString.klass, "__Field", VALUEFUNC(_wrap_String___Field), -1);
  rb_define_method(SwigClassString.klass, "length=", VALUEFUNC(_wrap_String_length_set), -1);
  rb_define_method(SwigClassString.klass, "length", VALUEFUNC(_wrap_String_length_get), -1);
  rb_define_method(SwigClassString.klass, "__s=", VALUEFUNC(_wrap_String___s_set), -1);
  rb_define_method(SwigClassString.klass, "__s", VALUEFUNC(_wrap_String___s_get), -1);
  SwigClassString.mark = 0;
  SwigClassString.destroy = (void (*)(void *)) free_String;
  SwigClassString.trackObjects = 0;
}

